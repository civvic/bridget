{
  "type": "state",
  "timestamp": 1754044894978,
  "origin": "vscode-webview://1ql27b0grt14rkuj26idbt9ktekivp44iu2s8pgfndvblm2j3iep/index.html?id=ceab9781-c31b-4f80-a40a-e8b9ef553325&origin=1e95bb6a-280d-4f6e-8090-7f55f54cbfbd&swVersion=4&extensionId=&platform=electron&vscode-resource-base-authority=vscode-resource.vscode-cdn.net&parentOrigin=vscode-file%3A%2F%2Fvscode-app&purpose=notebookRenderer",
  "cells": [
    {
      "idx": 0,
      "cell_type": "markdown",
      "source": "# cell 0",
      "id": "W0sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "81c3e877-b59a-48f5-a1da-21894d928d4b"
        }
      }
    },
    {
      "idx": 1,
      "cell_type": "code",
      "source": "# cell 1\nimport time\nfrom itertools import count\n\nimport ipywidgets as W\nimport matplotlib.pyplot as plt\nfrom bridget.helpers import displaydh\nfrom IPython.display import HTML, Image, Javascript, JSON, DisplayHandle, clear_output\ncounter = count()",
      "id": "W1sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "717322f8-95fa-425c-839d-8b9e7d4ef921"
        }
      },
      "outputs": [],
      "execution_count": 1
    },
    {
      "idx": 2,
      "cell_type": "code",
      "source": "# cell 2\nprint(1)",
      "id": "W2sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "92f3e304-fd32-4de2-badf-11577f9e7a4a"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "1\n"
        }
      ],
      "execution_count": 2
    },
    {
      "idx": 3,
      "cell_type": "code",
      "source": "# cell 3\ndisplaydh('cell 3', metadata={'bridge': {'cell': 3}});",
      "id": "W3sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "f2c19c18-a3f7-4acb-88e4-c7239178c401"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "'cell 3'"
          },
          "metadata": {
            "transient": {
              "display_id": "9d0548d3b88c66b7def8b47bbe5a12dd"
            },
            "bridge": {
              "cell": 3
            }
          }
        }
      ],
      "execution_count": 3
    },
    {
      "idx": 4,
      "cell_type": "code",
      "source": "# cell 4\nimport time\ntime.sleep(2)\ndisplaydh(HTML('cell 4'), metadata={'bridge': {'cell': 4}});",
      "id": "W4sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "798f7f83-9b31-4e21-a36b-5520c6f72a2d"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "cell 4",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "2ffe60c5c571592fc61fe81faab39e34"
            },
            "bridge": {
              "cell": 4
            }
          }
        }
      ],
      "execution_count": 4
    },
    {
      "idx": 5,
      "cell_type": "code",
      "source": "# cell 5\ndisplaydh(Javascript('console.log(\"cell 5\")'), metadata={'bridge': {'cell': 5}});",
      "id": "W5sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "a20081a9-4e7e-4301-be25-2a44f45bfc71"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": "console.log(\"cell 5\")",
            "text/plain": "<IPython.core.display.Javascript object>"
          },
          "metadata": {
            "transient": {
              "display_id": "b970be042e0ebd1e5af19aadcfbf213e"
            },
            "bridge": {
              "cell": 5
            }
          }
        }
      ],
      "execution_count": 5
    },
    {
      "idx": 6,
      "cell_type": "code",
      "source": "# cell 6\nprint(6.1)\nprint(6.2)",
      "id": "W6sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "e1ba8c0c-d248-44ff-9437-17482a711358"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "6.1\n6.2\n"
        }
      ],
      "execution_count": 6
    },
    {
      "idx": 7,
      "cell_type": "code",
      "source": "# cell 7\ndisplaydh(HTML('cell 7.1'), metadata={'bridge': {'cell': 7.1}})\ndisplaydh(HTML('cell 7.2'), metadata={'bridge': {'cell': 7.2}});",
      "id": "X10sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "7512abfe-f7d2-4047-a6b1-56aefbf9457e"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "cell 7.1",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "331d2582eb05fdc75afaa4c616fc8b6c"
            },
            "bridge": {
              "cell": 7.1
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "cell 7.2",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "bbb4397c26ce0c3fb2f1acddc6ce91b1"
            },
            "bridge": {
              "cell": 7.2
            }
          }
        }
      ],
      "execution_count": 7
    },
    {
      "idx": 8,
      "cell_type": "code",
      "source": "%HTML\n<h3>cell 8</h3>",
      "id": "X11sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "72d2a352-a5e3-4bb4-8e12-2302f9bac880"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<h3>cell 8</h3>\n",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {}
          }
        }
      ],
      "execution_count": 8
    },
    {
      "idx": 9,
      "cell_type": "code",
      "source": "%javascript\nconsole.log('cell 9')",
      "id": "X12sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "39565bc0-3d14-4912-8220-e9dacb965ca4"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": "console.log('cell 9')\n",
            "text/plain": "<IPython.core.display.Javascript object>"
          },
          "metadata": {
            "transient": {}
          }
        }
      ],
      "execution_count": 9
    },
    {
      "idx": 10,
      "cell_type": "code",
      "source": "%markdown\ncell 10",
      "id": "X13sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "ff1561f9-0589-470e-8921-0e99efd531bd"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "cell 10\n",
            "text/plain": "<IPython.core.display.Markdown object>"
          },
          "metadata": {
            "transient": {}
          }
        }
      ],
      "execution_count": 10
    },
    {
      "idx": 11,
      "cell_type": "code",
      "source": "%SVG\n<svg width=\"100\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\n  <text x=\"10\" y=\"10\">cell 11</text>\n</svg>",
      "id": "X14sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "4af29770-5f76-4517-9816-fa408687dab1"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/svg+xml": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"20\">\n  <text x=\"10\" y=\"10\">cell 11</text>\n</svg>",
            "text/plain": "<IPython.core.display.SVG object>"
          },
          "metadata": {
            "transient": {},
            "__displayOpenPlotIcon": true
          }
        }
      ],
      "execution_count": 11
    },
    {
      "idx": 12,
      "cell_type": "code",
      "source": "# cell 12\nW.IntSlider(12, description='cell')",
      "id": "X15sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "e7e6d557-3aa7-41a7-9e77-805295112aec"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6191b18d61a44fbd89eb132d22a28eab"
            },
            "text/plain": "IntSlider(value=12, description='cell')"
          },
          "execution_count": 12,
          "metadata": {}
        }
      ],
      "execution_count": 12
    },
    {
      "idx": 13,
      "cell_type": "code",
      "source": "#| hide\n# cell 13\nw = W.Output()\ndisplay(w)\nwith w:\n    print('cell 13.1')\n    display('cell 13.2')\n    display(HTML('cell 13.3'))",
      "id": "X16sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "8af15850-3d11-4498-a037-ce8b1ac2a161"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a9408d195fb84649b38948893390ef10"
            },
            "text/plain": "Output()"
          },
          "metadata": {
            "transient": {}
          }
        }
      ],
      "execution_count": 13
    },
    {
      "idx": 14,
      "cell_type": "code",
      "source": "# cell 14\nfig = plt.figure(figsize=(4, 2.67))\nplt.plot([1,2,3,4]);",
      "id": "X20sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "3b388911-cc9e-40af-8746-3821be96cbbd"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 400x267 with 1 Axes>"
          },
          "metadata": {
            "transient": {},
            "__displayOpenPlotIcon": true
          }
        }
      ],
      "execution_count": 14
    },
    {
      "idx": 15,
      "cell_type": "code",
      "source": "#| export\n# cell 15\nImage('https://jupyter.org/assets/try/jupyter.png', metadata={'bridge': {'cell': 15}})",
      "id": "X21sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "268197ce-b8c0-4365-84de-27d06bbb5c5c"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "",
            "text/plain": "<IPython.core.display.Image object>"
          },
          "execution_count": 15,
          "metadata": {
            "__displayOpenPlotIcon": true,
            "image/png": {
              "bridge": {
                "cell": 15
              }
            }
          }
        }
      ],
      "execution_count": 15
    },
    {
      "idx": 16,
      "cell_type": "code",
      "source": "# cell 16\ndh = displaydh(display_id=True, metadata={'bridge': {'cell': 16}})",
      "id": "X22sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "d90254ba-7457-4559-9544-afe201a808ca"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {},
          "metadata": {
            "transient": {
              "display_id": "a6b5cc5f13bf64ce8dd73d0b79b0bef2"
            },
            "bridge": {
              "cell": 16
            }
          }
        }
      ],
      "execution_count": 16
    },
    {
      "idx": 17,
      "cell_type": "code",
      "source": "# cell 17\ndh = displaydh(HTML('cell 17'), metadata={'bridge': {'cell': 17}})",
      "id": "X23sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "91e5d05a-6a56-4649-b8ad-8eae1bbd6727"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "cell 18",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "b0c4b491988399c7d88a82779528132d"
            },
            "bridge": {
              "cell": 18
            }
          }
        }
      ],
      "execution_count": 17
    },
    {
      "idx": 18,
      "cell_type": "code",
      "source": "# cell 18\ndh.update(HTML('cell 18'), metadata={'bridge': {'cell': 18}})",
      "id": "X24sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "05bc7556-dd06-4434-ba68-6d438ed2cf56"
        }
      },
      "outputs": [],
      "execution_count": 18
    },
    {
      "idx": 19,
      "cell_type": "code",
      "source": "# cell 19\ndisplaydh(JSON({'cell': 19}), metadata={'bridge': {'cell': 19}});",
      "id": "X25sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "c3efb63f-adee-41c4-9450-9f489406b873"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/json": {
              "cell": 19
            },
            "text/plain": "<IPython.core.display.JSON object>"
          },
          "metadata": {
            "transient": {
              "display_id": "e81dd25b299e4881aff6aec417c5bed9"
            },
            "application/json": {
              "expanded": false,
              "root": "root"
            },
            "bridge": {
              "cell": 19
            }
          }
        }
      ],
      "execution_count": 19
    },
    {
      "idx": 20,
      "cell_type": "code",
      "source": "# cell 20\ndisplay(W.IntSlider(20, description='cell'), metadata={'bridge': {'cell': 20}})",
      "id": "X26sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "873e423a-4028-4d7d-9912-61cb29478c2a"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a2e5512c64244dd8919c79ca4f5df767"
            },
            "text/plain": "IntSlider(value=20, description='cell')"
          },
          "metadata": {
            "transient": {},
            "bridge": {
              "cell": 20
            }
          }
        }
      ],
      "execution_count": 20
    },
    {
      "idx": 21,
      "cell_type": "code",
      "source": "",
      "id": "X30sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "9793d8a7-61fa-4651-9ce1-7b084c2258f9"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "idx": 22,
      "cell_type": "code",
      "source": "# cell 22\n1/0",
      "id": "X31sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "9cb695ff-382a-411e-b1c6-b7aaa921cbe4"
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "division by zero",
          "traceback": [
            "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
            "\u001b[31mZeroDivisionError\u001b[39m                         Traceback (most recent call last)",
            "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[21]\u001b[39m\u001b[32m, line 2\u001b[39m",
            "\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# cell 22\u001b[39;00m",
            "\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[32;43m1\u001b[39;49m\u001b[43m/\u001b[49m\u001b[32;43m0\u001b[39;49m",
            "",
            "\u001b[31mZeroDivisionError\u001b[39m: division by zero"
          ]
        }
      ],
      "execution_count": 21
    },
    {
      "idx": 23,
      "cell_type": "markdown",
      "source": "# cell 23",
      "id": "X32sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "52b08c54-a86f-41a4-a11c-0d74faf81bfd"
        }
      }
    },
    {
      "idx": 24,
      "cell_type": "code",
      "source": "# cell 24\nfrom itertools import count\nfrom bridget.helpers import displaydh\nfrom IPython.display import HTML, Javascript, clear_output\ncounter = count()\ndh0 = displaydh(HTML('cell 24.0'), metadata={'bridge': {'cell': 24.0}})\ndh1 = displaydh(\n    {'application/x-notebook-state+json': {'feedback': True, 'hide': False, 'debug': True, 'id': next(counter)}}, \n    raw=True, metadata={'bridge': {'cell': 24.1}})",
      "id": "X33sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "e4bbb456-27fa-47d1-b95b-637b61e0e8f5",
          "renderer": true
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "cell 28",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "17a535413c8fe54ee37fcbb955080974"
            },
            "bridge": {
              "cell": 28,
              "cnt": 3
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "",
            "application/x-notebook-state+json": {"debug":true,"id":9}
          },
          "metadata": {
            "transient": {
              "display_id": "4e0bb057682577c6b2e76798cfd1c72b"
            },
            "bridge": {
              "cell": 34
            }
          }
        }
      ],
      "execution_count": 22
    },
    {
      "idx": 25,
      "cell_type": "code",
      "source": "# cell 25\ndh1.update({'application/x-notebook-state+json': {'id': next(counter), 'update': 'diff'}}, raw=True, \n        metadata={'bridge': {'cell': 25}})",
      "id": "X34sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "7e0e7b1b-9633-4035-9365-80799bceb2ae"
        }
      },
      "outputs": [],
      "execution_count": 23
    },
    {
      "idx": 26,
      "cell_type": "code",
      "source": "# cell 26\n_ = displaydh('cell 26.1', metadata={'bridge': {'cell': 26.1}})\n_ = displaydh('cell 26.2', metadata={'bridge': {'cell': 26.2}})",
      "id": "X35sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "5dc3eece-bec8-47c1-b409-0147dc8a7114"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "'cell 26.1'"
          },
          "metadata": {
            "transient": {
              "display_id": "c68769547e548a782744181ecf1b0300"
            },
            "bridge": {
              "cell": 26.1
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "'cell 26.2'"
          },
          "metadata": {
            "transient": {
              "display_id": "856c65ace729d32c289b73e63449e0bb"
            },
            "bridge": {
              "cell": 26.2
            }
          }
        }
      ],
      "execution_count": 24
    },
    {
      "idx": 27,
      "cell_type": "code",
      "source": "# cell 27\n_ = display('cell 27.1', metadata={'bridge': {'cell': 27.1}})\n_ = display('cell 27.2', metadata={'bridge': {'cell': 27.2}})",
      "id": "X36sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "246f66f3-e71d-4fd1-9041-40e32c38a56a"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "'cell 27.1'"
          },
          "metadata": {
            "transient": {},
            "bridge": {
              "cell": 27.1
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "'cell 27.2'"
          },
          "metadata": {
            "transient": {},
            "bridge": {
              "cell": 27.2
            }
          }
        }
      ],
      "execution_count": 25
    },
    {
      "idx": 28,
      "cell_type": "code",
      "source": "# cell 28\ndh1.update({'application/x-notebook-state+json': {'id': next(counter)}}, raw=True, \n        metadata={'bridge': {'cell': 28}})\ndh0.update(HTML('cell 28'), metadata={'bridge': {'cell': 28, 'cnt': next(counter)}})",
      "id": "X40sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "2d5e3f49-cc7d-4af2-91f1-c2c0285346a4"
        }
      },
      "outputs": [],
      "execution_count": 26
    },
    {
      "idx": 29,
      "cell_type": "code",
      "source": "# cell 29\ndh1.update({'application/x-notebook-state+json': {'feedback': False, 'id': next(counter), 'update':'opts'}}, raw=True, \n        metadata={'bridge': {'cell': 29}})",
      "id": "X41sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "c8e29798-99e3-4834-9a4e-762f48bf8a63"
        }
      },
      "outputs": [],
      "execution_count": 27
    },
    {
      "idx": 30,
      "cell_type": "code",
      "source": "# cell 30\ndh1.update({'application/x-notebook-state+json': {'feedback': True, 'id': next(counter), 'update':'opts'}}, raw=True, \n        metadata={'bridge': {'cell': 30}})",
      "id": "X42sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "29682245-e83e-434e-b053-e5cb96535236"
        }
      },
      "outputs": [],
      "execution_count": 28
    },
    {
      "idx": 31,
      "cell_type": "code",
      "source": "# cell 31\ndh1.update({'application/x-notebook-state+json': {'hide': True, 'id': next(counter), 'update':'opts'}}, raw=True, \n        metadata={'bridge': {'cell': 31}})",
      "id": "X43sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "91796c88-1f45-4533-a75c-a646ceea4c8d"
        }
      },
      "outputs": [],
      "execution_count": 29
    },
    {
      "idx": 32,
      "cell_type": "code",
      "source": "# cell 32\ndh1.update({'application/x-notebook-state+json': {'hide': False, 'id': next(counter), 'update':'opts'}}, raw=True, \n        metadata={'bridge': {'cell': 32}})",
      "id": "X44sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "736d60ba-138a-4bb7-bdb4-fd1c2fb2c9a3"
        }
      },
      "outputs": [],
      "execution_count": 30
    },
    {
      "idx": 33,
      "cell_type": "code",
      "source": "# cell 33\ndh1.update({'application/x-notebook-state+json': {'debug': False, 'id': next(counter)}, 'update':'opts'}, raw=True, \n        metadata={'bridge': {'cell': 33}})",
      "id": "X45sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "1776b831-07d1-4ff7-aa55-6d2b828f2374"
        }
      },
      "outputs": [],
      "execution_count": 31
    },
    {
      "idx": 34,
      "cell_type": "code",
      "source": "# cell 34\ndh1.update({'application/x-notebook-state+json': {'debug': True, 'id': next(counter)}, 'update':'opts'}, raw=True, \n        metadata={'bridge': {'cell': 34}})",
      "id": "X46sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "ded37fc1-430a-46cc-ba92-5cd73735e5f2"
        }
      },
      "outputs": [],
      "execution_count": 32
    },
    {
      "idx": 35,
      "cell_type": "code",
      "source": "# cell 35\ndh2 = displaydh({'application/x-notebook-state+json': {'feedback': True, 'debug': True, 'id': next(counter)}}, \n        raw=True, metadata={'bridge': {'cell': 35}})\n# clear_output()",
      "id": "X50sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "e7eb193d-f9fe-41b6-b817-1328963ff734",
          "renderer": true
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/x-notebook-state+json": "{\"id\":11}"
          },
          "metadata": {
            "transient": {
              "display_id": "8894c44ba611e5ac9b751df9df223d30"
            },
            "bridge": {
              "cell": 36,
              "update": true
            }
          }
        }
      ],
      "execution_count": 33
    },
    {
      "idx": 36,
      "cell_type": "code",
      "source": "# cell 36\ndh2.update({'application/x-notebook-state+json': {'id': next(counter)}}, raw=True, \n        metadata={'bridge': {'cell': 36, 'update': True}})",
      "id": "X51sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "dae10da0-df1d-4e79-baec-528472d53959"
        }
      },
      "outputs": [],
      "execution_count": 34
    },
    {
      "idx": 37,
      "cell_type": "code",
      "source": "from itertools import count\nimport anywidget, time\nfrom IPython.display import DisplayHandle\nfrom bridget.helpers import displaydh\n# from bridget.helpers import skip\nimport ipywidgets as W\n\ncounter = count()\n\nclass TestWidget(anywidget.AnyWidget):\n    _esm = '''debugger;\nexport default { \n    async initialize({ model }) {\n        function on_msg(msg) {\n            console.log(`++++ Received message:`, msg);\n            if (window.$Nb) {\n                msg.origin = document.location.href;\n                window.$Nb.update(msg);\n                return;\n            }\n            return model.send({ id: msg.id, response: 'no response' });\n        }\n        model.on(\"msg:custom\", on_msg);\n        function on_stateChange(chg) {\n            console.log('++++ on_state', chg.reqId, chg);\n            model.send({ changes: chg });\n        }\n        let cleanup;\n        if (window.$Nb) {\n            cleanup = window.$Nb.addStateObserver(on_stateChange);\n        }\n        if (cleanup) return cleanup;\n    }\n};\n    '''\n    dh: DisplayHandle\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.on_msg(self._handle_message)\n        self.out = W.Output()\n        display(self.out)\n        with self.out:\n            print('Test widget, cell 35')\n\n    def _handle_message(self, w, msg, buffers):\n        # self.dh.update(f'Received {msg=}, {buffers=}', metadata=skip(cell=35))\n        self.msg = msg\n        with self.out:\n            print(f'Received {msg=}, {buffers=}')\n\nw = TestWidget()",
      "id": "X52sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "28128a8f-b8a7-47db-8430-b45260f2f9f3"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bffa9610926e4f05acdc661b5bd3f592"
            },
            "text/plain": "Output()"
          },
          "metadata": {
            "transient": {}
          }
        }
      ],
      "execution_count": 35
    },
    {
      "idx": 38,
      "cell_type": "code",
      "source": "# cell 38\nw.send({'id': next(counter), 'update': 'full'})",
      "id": "X53sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "622c7097-bc29-495d-bab2-71b53bbec98a"
        }
      },
      "outputs": [],
      "execution_count": 37
    },
    {
      "idx": 39,
      "cell_type": "code",
      "source": "# cell 39\ndh = displaydh(metadata={'bridge': {'cell': 39}})",
      "id": "X54sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "8acb2751-93cd-4a6f-9f71-d36ef74abfba"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "idx": 40,
      "cell_type": "code",
      "source": "# cell 40\nthis_id = next(counter)\n_ = displaydh(metadata={'bridge': {'cell': 40, 'this': this_id}})\n# nb.source.send({'cmd': 'get_state'}, timeout=5)\n# clear_output(wait=True)",
      "id": "X55sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "c01d8a36-c1fa-437d-a7cf-f369c4f66ecf"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "idx": 41,
      "cell_type": "code",
      "source": "# cell 41\n# find_me",
      "id": "X56sZmlsZQ==",
      "metadata": {
        "brd": {
          "id": "340489bf-419a-4da3-9b06-eb1b5cd6daba"
        }
      },
      "outputs": [],
      "execution_count": 7
    }
  ],
  "nbData": {
    "cellCount": 42,
    "metadata": {
      "cells": [],
      "metadata": {
        "kernelspec": {
          "display_name": "Python 3",
          "language": "python",
          "name": "python3"
        },
        "language_info": {
          "codemirror_mode": {
            "name": "ipython",
            "version": 3
          },
          "file_extension": ".py",
          "mimetype": "text/x-python",
          "name": "python",
          "nbconvert_exporter": "python",
          "pygments_lexer": "ipython3",
          "version": "3.12.11"
        },
        "widgets": {
          "application/vnd.jupyter.widget-state+json": {
            "state": {},
            "version_major": 2,
            "version_minor": 0
          }
        }
      },
      "nbformat": 4,
      "nbformat_minor": 4,
      "indentAmount": " "
    },
    "notebookType": "jupyter-notebook",
    "notebookUri": "file:///Users/vic/dev/repo/project/bridget/packages/nbinspect-vscode/test/outputs.ipynb"
  },
  "reqId": 1
}
