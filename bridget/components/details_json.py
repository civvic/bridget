"""FastHTML component that displays a JSON object in a `details` element."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/30_details_json.ipynb.

# %% ../../nbs/30_details_json.ipynb 1
from __future__ import annotations


# %% auto 0
__all__ = ['Val', 'NameVal', 'DetailsJSON']

# %% ../../nbs/30_details_json.ipynb
from typing import Any
from typing import Literal
from typing import Mapping

from fasthtml.xtend import Style
from olio.common import val_at


# %% ../../nbs/30_details_json.ipynb
from ..bridget import _n
from ..bridget import bridge_cfg
from ..bridget import Bridget
from ..routing import ar
from ..routing import RouteProvider


# %% ../../nbs/30_details_json.ipynb
from fasthtml.components import Details, Summary, Ul, Li, Span


# %% ../../nbs/30_details_json.ipynb
def Val(v): 
    c = (
        'null' if v is None else 
        'true' if v is True else 
        'false' if v is False else 
        'string' if isinstance(v, str) else 
        'number' if isinstance(v, (int, float)) else 
        '')
    return Span(v if v is not None else 'None', cls=f"v {c}")
def NameVal(k, v): return Span(Span(k, cls='n'), ': ', Val(v))

class DetailsJSON(RouteProvider):

    def __init__(self, o:Mapping[str, Any], summary:str='', open:bool|Literal['all']=True):
        self.o, self.summary, self.open, self._mounted = o, summary or 'summary', open, False

    def _ipython_display_(self):
        brt = Bridget()
        if bridge_cfg.auto_mount and not self._mounted: brt.mount(self, show=False)
        brt(self)

    @ar('/{dp:path}', methods='get', name='get')
    def __call__(self, dp:str='', all:bool=False): 
        try: d = val_at(self.o, dp, sep='/') if dp else self.o
        except Exception: return None
        return self.__ft__(dp, d, all)
    
    def __ft__(self, dp:str|None=None, d:Mapping|None=None, openall:bool=False):
        if not dp: dp, d, openall = '', self.o, self.open == 'all'
        its = Ul()(*(
            Li()(
                NameVal(k, v) if not isinstance(v, Mapping) else 
                self.__ft__(f"{dp}/{k}", v, openall) if openall else
                Details(hx_get=f"/{self.ar.to()}/"+(f"{dp}/" if dp else '')+f"{k}")(_n,Summary(k),_n)
            ) for k,v in (d or {}).items()))
        return (
            Details(open=True)(Summary(dp.split('/')[-1]), _n, its) if dp else 
            Details(open=self.open is not False, hx_swap='outerHTML')(_n, Style(self._css_), Summary(self.summary), _n, its))

    _css_ = (
        'me ul { list-style-type:none; list-style-position: outside; padding-inline-start: 22px; margin: 0; } '
        '''me .string { color: #24837b; } me .string::before { content: "'"; } me .string::after { content: "'"; } '''
        'me .number { color: #ad8301; } '
        'me .true { color: blue; } '
        'me .false { color: red; } '
        'me .null { color: gray; } '
    )

