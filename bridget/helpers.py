"""..."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_helpers.ipynb.

# %% ../nbs/01_helpers.ipynb 1
from __future__ import annotations

# %% auto 0
__all__ = ['bridge_cfg', 'BridgeCfg', 'Singleling', 'cleanupwidgets', 'pretty_repr', 'rich_display', 'CLog', 'kounter',
           'simple_id', 'id_gen', 'find', 'read_vfile', 'ScriptV', 'StyleV', 'nb_app']

# %% ../nbs/01_helpers.ipynb
import dataclasses
import json
import os
import sys
from binascii import hexlify
from functools import reduce
from inspect import Parameter
from typing import Any
from typing import DefaultDict
from typing import Hashable
from typing import Mapping
from typing import overload
from typing import Sequence

import fastcore.all as FC
from fastcore.xml import FT
from fastcore.xml import NotStr
from fasthtml.basics import ft_html
from fasthtml.core import FastHTML
from IPython.display import display
from IPython.display import DisplayHandle
from olio.common import Config


# %% ../nbs/01_helpers.ipynb
_n = '\n'

# %% ../nbs/01_helpers.ipynb
@dataclasses.dataclass
class BridgeCfg(Config):
    """
    Settings for core `Bridget` behavior.
    
    if `True`:
    - `auto_show`: FastHTML objects display as HTML instead of markdown.
    - `auto_mount`: components with routes are automatically mounted.
    - `auto_id`: display elements get auto-generated IDs.
    - `bootstrap`: load bridget.js on import.
    - `current_did`: the ID of the current display cell.
    - `debug_req`: request debugging is enabled.
    """
    auto_show: bool = False
    auto_mount: bool = False
    auto_id: bool = False
    bootstrap: bool = os.environ.get('BRIDGET_BOOTSTRAP', '').lower() in ('true', '1', 'on', 'yes', 'y')
    current_did: str|None = None
    debug_req: bool = False

bridge_cfg = BridgeCfg()


# %% ../nbs/01_helpers.ipynb
class Singleling:
    def __new__(cls, *args, **kwargs):
        if '__instance__' not in cls.__dict__: cls.__instance__ = super().__new__(cls, *args, **kwargs)
        return cls.__instance__
    
    def setup(self, *args, **kwargs):
        "One-time setup"
        setattr(type(self), 'setup', FC.noop)


# %% ../nbs/01_helpers.ipynb
def _get_globals(mod: str):
    if hasattr(sys, '_getframe'):
        glb = sys._getframe(2).f_globals
    else:
        glb = sys.modules[mod].__dict__
    return glb


# %% ../nbs/01_helpers.ipynb
def cleanupwidgets(*ws, mod: str|None=None, clear=True):
    from IPython.display import clear_output
    glb = _get_globals(mod or __name__)
    if clear: clear_output(wait=True)
    for w in ws:
        _w = glb.get(w) if isinstance(w, str) else w
        if _w:
            try: _w.close()  # type: ignore
            except: pass


# %% ../nbs/01_helpers.ipynb
@overload
def pretty_repr(*o, html:bool=True, text:bool=False, **kwargs) -> str: ...
@overload
def pretty_repr(*o, html:bool=False, text:bool=True, **kwargs) -> str: ...
def pretty_repr(*o, html:bool=True, text:bool=True, **kwargs) -> dict[str, str]|str:
    from rich.pretty import Pretty
    d = Pretty(*o, **kwargs)._repr_mimebundle_(
        include=((),('text/plain',))[text] + ((),('text/html',))[html], 
        exclude=((),('text/plain',))[not text] + ((),('text/html',))[not html]
        )
    return d if len(d) > 1 else tuple(d.values())[0]


# %% ../nbs/01_helpers.ipynb
def rich_display(*o, dhdl: DisplayHandle|None=None):
    if not o: return
    vv:tuple[str, ...] = tuple(FC.flatten([_.items() for _ in map(pretty_repr, o)]))  # type: ignore
    dd = {'text/plain':'\n'.join(vv[1::4]), 'text/html':'\n'.join(vv[3::4])}
    if dhdl: dhdl.update(dd, raw=True)
    else: display(dd, raw=True)


# %% ../nbs/01_helpers.ipynb
def CLog(*o):
    return f"<script>console.log({','.join(map(repr, o))})</script>"


# %% ../nbs/01_helpers.ipynb
class kounter:
    def __init__(self): self.d = DefaultDict(int)
    def __call__(self, k): d = self.d; d[k] += 1; return self.d[k]


# %% ../nbs/01_helpers.ipynb
def simple_id():
    return 'b'+hexlify(os.urandom(16), '-', 4).decode('ascii')

def id_gen():
    kntr = kounter()
    def _(o:Any=None): 
        if o is None: return simple_id()
        return f"{type(o).__name__}_{id(o) if isinstance(o, Hashable) else kntr(type(o).__name__)}"
    return _

# %% ../nbs/01_helpers.ipynb
_II = isinstance
def _at(d: Mapping|Sequence, k: str) -> Any:
    return d[k] if _II(d, Mapping) else d[int(k)] if _II(d, Sequence) and not _II(d, (str, bytes)) else None

def find(key_path: str, j: Mapping|Sequence|str|bytes|bytearray, default:Any=Parameter.empty, sep:str='.') -> Any:
    try: return reduce(_at, key_path.split(sep), json.loads(j) if _II(j, (str, bytes, bytearray)) else j)
    except (KeyError, IndexError) as e:
        if default is not Parameter.empty: return default
        raise e


# %% ../nbs/01_helpers.ipynb
def read_vfile(cts:str)->str|None:
    import anywidget
    from anywidget._file_contents import _VIRTUAL_FILES
    if isinstance(cts, str) and cts.startswith('vfile:'):
        if fn := _VIRTUAL_FILES.get(cts, None):
            return fn.contents


# %% ../nbs/01_helpers.ipynb
@FC.delegates(ft_html, keep=True)  # type: ignore
def ScriptV(code:str="", **kwargs)-> FT:
    "A Script w/ code or `vfile:` contents that doesn't escape its code"
    return ft_html('script', (_n, NotStr(FC.ifnone(read_vfile(code), code))), **kwargs)

@FC.delegates(ft_html, keep=True)  # type: ignore
def StyleV(*c, **kwargs)-> FT:
    "A Style w/ code or `vfile:` contents that doesn't escape its code"
    return ft_html('style', tuple(NotStr(FC.ifnone(read_vfile(_), _)) for _ in c), **kwargs)


# %% ../nbs/01_helpers.ipynb
@FC.delegates(FastHTML)  # type: ignore
def nb_app(**kwargs):
    from starlette.middleware.cors import CORSMiddleware
    kwargs.update(default_hdrs=False, sess_cls=None)
    app = FastHTML(**kwargs)
    app.user_middleware = list(filter(lambda x: x.cls is not CORSMiddleware, app.user_middleware))
    return app

