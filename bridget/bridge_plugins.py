"""More examples of bridge plugins."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/16_bridge_plugins.ipynb.

# %% ../nbs/16_bridge_plugins.ipynb 1
from __future__ import annotations

# %% auto 0
__all__ = ['SwapStyleT', 'zeromd_js', 'zeromd_scr', 'HTMXCommander', 'HTMXCommanderPlugin', 'NBHooksPlugin']

# %% ../nbs/16_bridge_plugins.ipynb
from typing import Literal
from typing import TypeAlias

import fastcore.all as FC
import traitlets as T
from fastcore.xml import to_xml
from fasthtml.core import FT
from fasthtml.xtend import Script
from IPython.display import DisplayHandle
from olio.basic import bundle_path
from olio.common import update_
from traitlets import Any


# %% ../nbs/16_bridge_plugins.ipynb
import bridget.fasthtml_patching
import bridget.nb_hooks
from .bridge import BridgePlugin
from .bridge import BridgeWidget
from .bridge import debug
from .bridge_widget import anysource
from .bridge_widget import bundled
from .helpers import id_gen
from .nb_hooks import get_bridged
from .nb_hooks import get_capturer
from .nb_hooks import get_csi
from .nb_hooks import get_nb_from_hooks


# %% ../nbs/16_bridge_plugins.ipynb
BUNDLE_PATH = bundle_path(__name__)
new_id = id_gen()
_n = '\n'

# %% ../nbs/16_bridge_plugins.ipynb
commander_js = BUNDLE_PATH / 'js/commander.js'
commander_esm = bundled(commander_js)()

# %% ../nbs/16_bridge_plugins.ipynb
SwapStyleT: TypeAlias = Literal['innerHTML','outerHTML','testContent','beforebegin','afterbegin',
                        'beforeend','afterend','delete','none']

# %% ../nbs/16_bridge_plugins.ipynb
def swap(self, 
        target, 
        content, 
        *, 
        # ---- swapSpec:SwapSpec, 
        swapStyle: SwapStyleT='innerHTML',
        swapDelay: int|None=None, settleDelay: int|None=None,
        transition: bool|None=None,
        # ignoreTitle: bool|None=None, head: Literal['merge', 'append']|None=None,
        scroll: str|None=None, scrollTarget: str|None=None,
        show: str|None=None, showTarget: str|None=None, focusScroll: bool|None=None,
        # ---- swapOptions=None,
        select: str|None=None, selectOOB: str|None=None,
        # eventInfo: dict|None=None,
        anchor: str|None=None,        
        # contextElement: str|None=None,
        # afterSwapCallback: Callable|None=None, afterSettleCallback: Callable|None=None,
    ):
    if isinstance(content, FT): content = to_xml(content)
    elif hasattr(content, 'to_html'): content = content.to_html()
    d = {
        'target': f"#{target}" if isinstance(target, FT) else target,
        'content': content,
        'swapSpec': update_(**{
            'swapStyle': swapStyle, 'swapDelay': swapDelay, 'settleDelay': settleDelay,
            'transition': transition,
            # 'ignoreTitle': ignoreTitle, 'head': head,
            'scroll': scroll, 'scrollTarget': scrollTarget,
            'show': show, 'showTarget': showTarget, 'focusScroll': focusScroll,
            # 'afterSwapCallback': afterSwapCallback, 'afterSettleCallback': afterSettleCallback,
        }),
        'swapOptions': update_(**{
            'select': select, 'selectOOB': selectOOB,
            # 'eventInfo': eventInfo,
            'anchor': anchor,
            # 'contextElement': contextElement,
            # 'afterSwapCallback': afterSwapCallback, 'afterSettleCallback': afterSettleCallback,
        }),
    }
    self.send({
        'ctx': 'commander',
        'cmd': 'swap',
        'args': [*d.values()]
    })


# %% ../nbs/16_bridge_plugins.ipynb
class HTMXCommander(BridgeWidget):
    _esm = anysource(commander_esm, '''
export default { 
    async initialize({ model }) {
        await setupCommander(model.get('output_sels'));
        model.on("msg:custom", onCommanderMsg);
        model.set('_loaded', true); model.save_changes();
        return () => { 
            model.off("msg:custom", onCommanderMsg);
            model.set('_loaded', false); model.save_changes(); 
        };
    }
};
''')
    
    output_sels = T.List(['.output', '.jp-Cell-outputArea']).tag(sync=True)

    ctx_name = T.Unicode('commander').tag(sync=True)

    # hate stupid wiggly reds
    def swap(self: HTMXCommander,
        target, 
        content, 
        *, 
        # ---- swapSpec:SwapSpec, 
        swapStyle: Literal['innerHTML','outerHTML','testContent','beforebegin','afterbegin','beforeend','afterend','delete','none'],
        swapDelay: int|None=None, settleDelay: int|None=None,
        transition: bool|None=None,
        # ignoreTitle: bool|None=None, head: Literal['merge', 'append']|None=None,
        scroll: str|None=None, scrollTarget: str|None=None,
        show: str|None=None, showTarget: str|None=None, focusScroll: bool|None=None,
        # ---- swapOptions=None,
        select: str|None=None, selectOOB: str|None=None,
        # eventInfo: dict|None=None,
        anchor: str|None=None,        
        # contextElement: str|None=None,
        # afterSwapCallback: Callable|None=None, afterSettleCallback: Callable|None=None,
    ): ...

# %% ../nbs/16_bridge_plugins.ipynb
FC.patch_to(HTMXCommander)(swap)

# %% ../nbs/16_bridge_plugins.ipynb
class HTMXCommanderPlugin(BridgePlugin):
    src = bundled('''
import { setupCommander, onCommanderMsg } from './commander.js';

export default async function initializeCommander(bridge) {
    const sels = await bridge.get('commander', 'output_sels');
    await setupCommander(sels);
    bridge.on("commander", onCommanderMsg);
    return () => bridge.off('commander');
}
''')()
    ctx_name = 'commander'
    output_sels = ['.output', '.jp-Cell-outputArea']

    _bridge_delegates = ['swap']
    def on_inspect(self, *args, msg:Any, tracker:Any, **kwargs):
        self.log(f"{self.__class__.__name__} inspect: {msg=} {tracker=}")
    
    # hate stupid wiggly reds
    def swap(self: HTMXCommanderPlugin,
        target, 
        content, 
        *, 
        # ---- swapSpec:SwapSpec, 
        swapStyle: Literal['innerHTML','outerHTML','testContent','beforebegin','afterbegin','beforeend','afterend','delete','none'],
        swapDelay: int|None=None, settleDelay: int|None=None,
        transition: bool|None=None,
        # ignoreTitle: bool|None=None, head: Literal['merge', 'append']|None=None,
        scroll: str|None=None, scrollTarget: str|None=None,
        show: str|None=None, showTarget: str|None=None, focusScroll: bool|None=None,
        # ---- swapOptions=None,
        select: str|None=None, selectOOB: str|None=None,
        # eventInfo: dict|None=None,
        anchor: str|None=None,        
        # contextElement: str|None=None,
        # afterSwapCallback: Callable|None=None, afterSettleCallback: Callable|None=None,
    ): ...

FC.patch_to(HTMXCommanderPlugin)(swap)

# %% ../nbs/16_bridge_plugins.ipynb
class NBHooksPlugin(BridgePlugin):
    ctx_name = 'nbhooks'
    _bridge_delegates = ['dh', 'dhs']
    def __init__(self, *args, **kwargs):
        # Warning: ensure this is called from the main thread
        self.csi, self.brdd, self.capturer = get_csi(True), get_bridged(True), get_capturer(True)
        super().__init__(*args, **kwargs)
    
    def on_init(self, *args, info:str, **kwargs):
        super().on_init(*args, info=info, **kwargs)
        if self.is_initialized is True: self.bridge.state = get_nb_from_hooks()

    @property
    def dh(self)->DisplayHandle: return self.brdd.dh  # type: ignore

# %% ../nbs/16_bridge_plugins.ipynb
zeromd_js = '''
import ZeroMd from 'https://cdn.jsdelivr.net/npm/zero-md@3'
customElements.define('zero-md', ZeroMd);
'''

zeromd_scr = Script(debug(zeromd_js), id='zeromd', type='module')
