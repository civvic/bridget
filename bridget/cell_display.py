"""Helpers for output cells display"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_cell_display.ipynb.

# %% ../nbs/15_cell_display.ipynb 1
from __future__ import annotations


# %% auto 0
__all__ = ['autoid', 'DisplayId']

# %% ../nbs/15_cell_display.ipynb
from IPython.display import DisplayHandle
from IPython.display import HTML


# %% ../nbs/15_cell_display.ipynb
from .helpers import id_gen
from .helpers import Script


# %% ../nbs/15_cell_display.ipynb
new_id = id_gen()


# %% ../nbs/15_cell_display.ipynb
__autoid_scr = '''
//debugger;
me().attribute('id', 'output-{0}').classAdd('bridge');
setTimeout(el => {{ el.remove(); }}, 100, me('#{0}'))
'''
def autoid(idx=None):
    idx = idx or new_id()
    return Script(__autoid_scr.format(idx), id=idx), idx


# %% ../nbs/15_cell_display.ipynb
class DisplayId(DisplayHandle):
    def __init__(self, display_id=None):
        super().__init__(display_id or new_id())
        self._contents = None
        self._sc = ''
        # self._sc = to_xml(autoid(self.display_id)[0]) if bridge_cfg.auto_id else ''

    def display(self, obj='', **kwargs):
        from IPython.display import display
        self._contents = str(obj)
        display(HTML(self._contents + self._sc), display_id=self.display_id, **kwargs)

    def update(self, obj='', **kwargs):
        kwargs['update'] = True
        self.display(obj, **kwargs)

    def contents(self):
        return self._contents

