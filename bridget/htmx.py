"""Python wrapper of HTMX API."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/16_htmx.ipynb.

# %% ../nbs/16_htmx.ipynb 1
from __future__ import annotations


# %% auto 0
__all__ = ['commander_js', 'SwapStyleT', 'HTMXCommander', 'swap']

# %% ../nbs/16_htmx.ipynb
import inspect
from pathlib import Path
from typing import Literal
from typing import TypeAlias

import anywidget
import traitlets as T
from IPython.display import display
from IPython.display import HTML
from olio.common import update_


# %% ../nbs/16_htmx.ipynb
import bridget


# %% ../nbs/16_htmx.ipynb
_BUNDLER_PATH = Path() if __name__ == "__main__" else Path(inspect.getfile(bridget)).parent


# %% ../nbs/16_htmx.ipynb
commander_js = (_BUNDLER_PATH / 'commander.js').read_text()

class HTMXCommander(anywidget.AnyWidget):
    _esm = commander_js + '''
export default { 
    async initialize({ model }) {
        await initializeCommander(model.get('output_sels'));
        model.on("msg:custom", on_msg);
    }
};
'''
    
    output_sels = T.List(['.output', '.jp-Cell-outputArea']).tag(sync=True)

    def swap(self: HTMXCommander,
        target, 
        content, 
        *, 
        # ---- swapSpec:SwapSpec, 
        swapStyle: Literal['innerHTML','outerHTML','testContent','beforebegin','afterbegin','beforeend','afterend','delete','none'],
        swapDelay: int|None=None, settleDelay: int|None=None,
        transition: bool|None=None,
        # ignoreTitle: bool|None=None, head: Literal['merge', 'append']|None=None,
        scroll: str|None=None, scrollTarget: str|None=None,
        show: str|None=None, showTarget: str|None=None, focusScroll: bool|None=None,
        # ---- swapOptions=None,
        select: str|None=None, selectOOB: str|None=None,
        # eventInfo: dict|None=None,
        anchor: str|None=None,        
        # contextElement: str|None=None,
        # afterSwapCallback: Callable|None=None, afterSettleCallback: Callable|None=None,
    ): ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        dh = display(self, display_id=True)
        if dh: dh.update(HTML('<h3>HTMX commander loaded!</h3>'))  # user feedback, headless widget


# %% ../nbs/16_htmx.ipynb
SwapStyleT: TypeAlias = Literal['innerHTML','outerHTML','testContent','beforebegin','afterbegin',
                        'beforeend','afterend','delete','none']


# %% ../nbs/16_htmx.ipynb
def swap(self, 
        target, 
        content, 
        *, 
        # ---- swapSpec:SwapSpec, 
        swapStyle: SwapStyleT='innerHTML',
        swapDelay: int|None=None, settleDelay: int|None=None,
        transition: bool|None=None,
        # ignoreTitle: bool|None=None, head: Literal['merge', 'append']|None=None,
        scroll: str|None=None, scrollTarget: str|None=None,
        show: str|None=None, showTarget: str|None=None, focusScroll: bool|None=None,
        # ---- swapOptions=None,
        select: str|None=None, selectOOB: str|None=None,
        # eventInfo: dict|None=None,
        anchor: str|None=None,        
        # contextElement: str|None=None,
        # afterSwapCallback: Callable|None=None, afterSettleCallback: Callable|None=None,
    ):
    d = {
        'target': target,
        'content': content,
        'swapSpec': update_(**{
            'swapStyle': swapStyle, 'swapDelay': swapDelay, 'settleDelay': settleDelay,
            'transition': transition,
            # 'ignoreTitle': ignoreTitle, 'head': head,
            'scroll': scroll, 'scrollTarget': scrollTarget,
            'show': show, 'showTarget': showTarget, 'focusScroll': focusScroll,
            # 'afterSwapCallback': afterSwapCallback, 'afterSettleCallback': afterSettleCallback,
        }),
        'swapOptions': update_(**{
            'select': select, 'selectOOB': selectOOB,
            # 'eventInfo': eventInfo,
            'anchor': anchor,
            # 'contextElement': contextElement,
            # 'afterSwapCallback': afterSwapCallback, 'afterSettleCallback': afterSettleCallback,
        }),
    }
    self.send({
        'cmd': 'swap',
        'args': [*d.values()]
    })

