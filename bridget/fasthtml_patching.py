"""Monkey-patching some fasthtml features/issues while waiting to submit the corresponding PRs."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_fasthtml_patching.ipynb.

# %% ../nbs/03_fasthtml_patching.ipynb 1
from __future__ import annotations

# %% auto 0
__all__ = ['JupyUviB']

# %% ../nbs/03_fasthtml_patching.ipynb
import fastcore.all as FC
from fastcore.xml import to_xml
from fasthtml.components import Div
from fasthtml.core import FT
from fasthtml.jupyter import JupyUvi
from fasthtml.xtend import Script
from IPython.display import display
from IPython.display import HTML


# %% ../nbs/03_fasthtml_patching.ipynb
from .helpers import bridge_cfg


# %% ../nbs/03_fasthtml_patching.ipynb
@FC.patch
def _repr_mimebundle_(self: FT, include=None, exclude=None):
    mb = {'text/plain': repr(self)}
    if bridge_cfg.auto_show: mb['text/html'] = self.__html__()
    else: mb['text/markdown'] = self._repr_markdown_()
    return mb

# %% ../nbs/03_fasthtml_patching.ipynb
def htmx_config_port(host='localhost', port=8000):
    display(HTML('''
<script>
document.body.addEventListener('htmx:configRequest', (event) => {
    if(event.detail.path.includes('://')) return;
    htmx.config.selfRequestsOnly=false;
    event.detail.path = `http://%s:%s${event.detail.path}`;
});
</script>''' % (host, port)))

# %% ../nbs/03_fasthtml_patching.ipynb
class JupyUviB(JupyUvi):
    "Start and stop a Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`"
    def __init__(self, app, log_level="error", host='0.0.0.0', port=8000, start=True, **kwargs):
        self.kwargs = kwargs
        FC.store_attr(but='start')
        self.server = None
        if start: self.start()
        htmx_config_port(host, port)

# %% ../nbs/03_fasthtml_patching.ipynb
def render_ft():
    try: del FT._repr_mimebundle_  # type: ignore  # undo our patch to allow FastHTML Jupyter to work as intended
    except Exception: pass
    @FC.patch
    def _repr_html_(self:FT): 
        return to_xml(
            (Div(self), 
            Script('if (window.htmx) htmx.process(document.body)'))
        )
