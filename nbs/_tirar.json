{
  "type": "state",
  "cells": [
    {
      "cell_type": "code",
      "source": "#| default_exp nb_state\n",
      "metadata": {
        "bridget": {
          "id": "5c22ae68-7983-41bc-95ad-01962081960f"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\nfrom __future__ import annotations\n",
      "metadata": {
        "bridget": {
          "id": "de17fb81-652e-4838-8467-c9fd4e75269a"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Notebook state\n\n> Programmatic access to notebook cells and outputs.\n\n",
      "metadata": {
        "bridget": {
          "id": "91076d1b-c6d6-4fe0-bd93-282de3246817"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Prologue",
      "metadata": {
        "bridget": {
          "id": "6c6130c9-a5e5-49ca-9785-fc4a769883d2"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\nimport asyncio\nimport inspect\nimport json\nfrom functools import cache\nfrom functools import partial\nfrom functools import partialmethod\nfrom inspect import Parameter\nfrom pathlib import Path\nfrom typing import Literal\nfrom typing import TypeAlias\n\nimport anywidget\nimport traitlets as T\nfrom fastcore.all import L\nfrom fastcore.all import nested_idx\nfrom IPython.display import display\nfrom IPython.display import HTML\nfrom olio.common import AD\nfrom nbdev.showdoc import add_docs\n",
      "metadata": {
        "bridget": {
          "id": "e217b3cf-6e6e-46fa-a394-5cccf148eb70"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\nimport bridget\nfrom bridget.helpers import anytext\nfrom bridget.helpers import cached_property\nfrom bridget.helpers import emptyd\nfrom bridget.helpers import patch_cached_property\nfrom bridget.helpers import RenderJSON\nfrom bridget.helpers import skip\n",
      "metadata": {
        "bridget": {
          "id": "d77b2ae4-72f4-40f2-8473-ea776c68fa66"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "import collections\nimport json\nfrom pathlib import Path\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Mapping\nfrom typing import Sequence\n\nimport fastcore.all as FC\nimport nbformat\nfrom fastcore.xml import to_xml\nfrom IPython.display import Image\nfrom IPython.display import Markdown\nfrom nbdev.showdoc import *\nfrom olio.callback import Callback\nfrom olio.callback import CollBack\nfrom olio.callback import FuncCB\nfrom olio.callback import process_\nfrom olio.common import update_\nfrom rich.pretty import pretty_repr\n",
      "metadata": {
        "bridget": {
          "id": "8ef36852-fb8a-42a6-b21b-fcf0077250d9"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "from fastcore.test import *\nfrom rich.console import Console",
      "metadata": {
        "bridget": {
          "id": "844fc92d-2c80-41b9-a84f-6796ce8087e0"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "from bridget.helpers import cleanupwidgets\n",
      "metadata": {
        "bridget": {
          "id": "be00bac1-eb31-463b-adf6-8aae4ce3f224"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "----\n",
      "metadata": {
        "bridget": {
          "id": "d8a8dc56-d4b6-4bc9-afb4-a2493a071362"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\n_BUNDLER_PATH = Path() if __name__ == \"__main__\" else Path(inspect.getfile(bridget)).parent\n_EMPTY = Parameter.empty\nEmptyT = type[_EMPTY]\n",
      "metadata": {
        "bridget": {
          "id": "76037042-bb27-4a17-af22-017c1f88d518"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "cprint = (console := Console(width=120)).print\n",
      "metadata": {
        "bridget": {
          "id": "71561e76-92b8-44b0-87a3-19f3dda8449b"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# needed for vfile:\n%load_ext anywidget\n",
      "metadata": {
        "bridget": {
          "id": "4dc2cf36-f215-441d-92de-93aaac335db4"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "%env ANYWIDGET_HMR=0",
      "metadata": {
        "bridget": {
          "id": "ff31efaf-f189-4ce5-81c5-7c25fc98d92c"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "env: ANYWIDGET_HMR=0\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "import ipywidgets as W",
      "metadata": {
        "bridget": {
          "id": "4c3cc0a3-d4e3-4670-a51f-960168754619"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# cell 1\ndisplay(W.IntSlider(), metadata=skip())\n",
      "metadata": {
        "bridget": {
          "id": "8a1b7764-5a69-48ad-97d0-5088b7e2e6c9"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "----",
      "metadata": {
        "bridget": {
          "id": "d762f8ad-8b7c-4693-b9d0-c1a260d0cd12"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Notebook state",
      "metadata": {
        "bridget": {
          "id": "8e753e15-7f5e-4331-88cf-65c38be3e947"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "\n```javascript\n{\n    \"type\": \"state\",  // \"state\" | ...\n    \"cells\": [\n        // Markdown cell\n        {\n            \"cell_type\": 1,  // 1: markdown, 2: code\n            \"source\": \"string\",  // Cell content\n            \"metadata\"?: {  // Optional\n                \"tags\": [\"string\"],\n                \"jupyter\": { /* jupyter specific */ }\n                \"bridget\": { \"id\": \"string\" }\n            }\n        },\n        // Code cell with outputs\n        {\n            \"cell_type\": 2,\n            \"source\": \"string\",\n            \"outputs\"?: [  // Optional, only for code cells\n                {\n                    \"output_type\": 1 | 2 | 3 | 4 // \"stream\" | \"display_data\" | \"execute_result\" | \"error\",\n                    \"metadata\"?: {...},  // Optional\n                    // Type-specific fields\n                    \"name\"?: \"stdout\" | \"stderr\",  // For stream\n                    \"text\"?: \"string\",             // For stream\n                    \"data\"?: {  // Optional\n                        \"mime/type\": \"string\"  // e.g., \"text/plain\": \"content\"\n                    },\n                    \"ename\"?: \"string\",            // For error\n                    \"evalue\"?: \"string\",           // For error\n                    \"traceback\"?: [\"string\"],      // For error\n                    \"execution_count\"?: number     // For execute_result\n                }\n            ]\n        }\n    ]\n}\n```",
      "metadata": {
        "bridget": {
          "id": "3c0e41e7-ddd1-4b3f-af7e-6cee172986dd"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef empty_state():\n    return {'type': 'state', 'cells': [], 'timestamp': ''}\n",
      "metadata": {
        "bridget": {
          "id": "c6be7db0-205e-490d-b7a9-67b9e12ab16a"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "state = json.loads(Path('../nbinspect/outputs.json').read_text('utf-8'))\n\n# cprint(state, width=120, overflow='ellipsis')\nRenderJSON(state, init_level=1, max_height=400).display()\n",
      "metadata": {
        "bridget": {
          "id": "09bc8799-8c22-4b8e-9737-389afd70ed91"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# NBCell",
      "metadata": {
        "bridget": {
          "id": "e6d658c8-17aa-416f-8558-216a02f4bf87"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\nCellTypesT: TypeAlias = Literal['code', 'markdown']\n\nclass NB(AD):\n    cells: L[NBCell]  # type: ignore\n    def __init__(self, cells: Sequence[NBCell]|L, *args, **kwargs): self.cells = L(cells); super().__init__(*args, **kwargs)\n\nclass NBCell(AD):\n    cell_type: str\n    metadata: dict\n    source: str\n    def __new__(cls, cell: Mapping):\n        if cls is NBCell: cls = _CTYP[cell.get('cell_type', 'raw')]\n        return AD.__new__(cls, cell)\n    def __init__(self, cell: Mapping):\n        ks = tuple(FC.flatten(map(inspect.get_annotations, type(self).mro())))\n        cell = FC.filter_keys(cell, FC.in_(ks))  # type: ignore\n        super().__init__(cell)\n        self.source = ''.join(getattr(self, 'source', ()))\n    def _repr_markdown_(self): \n        return f'> {self.get('cell_type', 'raw')}\\n```json\\n{pretty_repr(self, indent_size=2, max_width=120)}\\n```'\n#     def _repr_markdown_(self): \n#         return f\"\"\"\n# <details><summary>{self.cell_type}</summary>\n\n# ```json\\n{pretty_repr(self, indent_size=2, max_width=120)}\\n```\n\n# </details>\"\"\"\n\n\nclass NBCellRaw(NBCell): attachments: dict\nclass NBCellMarkdown(NBCellRaw):...\nclass NBCellCode(NBCell): \n    outputs: tuple[NBOutput, ...]\n    execution_count: int | None\n    def __init__(self, cell: Mapping):\n        super().__init__(cell)\n        self.outputs = tuple(NBOutput(o) for o in cell.get('outputs', ()))\n\nclass NBOutput(AD): \n    output_type: str\n    def __new__(cls, out: Mapping):\n        if cls is NBOutput: cls = _OUTTYP[out.get('output_type', 'stream')]\n        return AD.__new__(cls, out)\n    def __init__(self, out: Mapping):\n        ks = tuple(FC.flatten(map(inspect.get_annotations, type(self).mro())))\n        out = FC.filter_keys(out, FC.in_(ks))  # type: ignore\n        super().__init__(out)\n\nclass NBOutputStream(NBOutput):\n    name: Literal['stdout', 'stderr']\n    text: str\n\nclass NBOutputDisplayData(NBOutput):\n    data: dict\n    metadata: dict\n\nclass NBOutputExecuteResult(NBOutput):\n    execution_count: int\n    data: dict\n    metadata: dict\n\nclass NBOutputError(NBOutputExecuteResult):\n    ename: str\n    evalue: str\n    traceback: list[str]\n\n_CTYP = {'raw':NBCellRaw, 'markdown':NBCellMarkdown, 'code':NBCellCode}\n# _CTYPInv = {v:k for k,v in _CTYP.items()}\n_OUTTYP = {'stream':NBOutputStream, 'display_data':NBOutputDisplayData, 'execute_result':NBOutputExecuteResult, 'error':NBOutputError}\n# _OUTTYPInv = {v:k for k,v in _OUTTYP.items()}\n\n",
      "metadata": {
        "bridget": {
          "id": "689918d3-85bc-45d1-b0b0-144b71b4740c"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "test_eq(NBCell({}), NBCellRaw({}))\ntest_eq(NBCell(AD(cell_type='markdown')), {'cell_type': 'markdown', 'source': ''})\ntest_eq(\n    NBCell(AD(cell_type='code', source='print(\"hello\")')), \n    {'cell_type': 'code', 'source': 'print(\"hello\")', 'outputs': ()})\ntest_eq(\n    NBCell(\n        AD(cell_type='code', source='display(\"hello\")', \n            outputs=[AD(output_type='display_data', data={'text/plain': 'hello'})])),\n    {'cell_type': 'code', 'source': 'display(\"hello\")', 'outputs': (AD(output_type='display_data', data={'text/plain': 'hello'}),)})\ntest_eq(\n    NBCell({\n        'cell_type': 'code',\n        'source': \"display(HTML('cell 4'))\\n\",\n        'outputs': ({\n            'output_type': 'display_data',\n            'data': {'text/html': 'cell 4', 'text/plain': '<IPython.core.display.HTML object>'},\n            },)}),\n    {'cell_type': 'code', 'source': \"display(HTML('cell 4'))\\n\", 'outputs': (AD(output_type='display_data', data={'text/html': 'cell 4', 'text/plain': '<IPython.core.display.HTML object>'}),)})",
      "metadata": {
        "bridget": {
          "id": "6d7ecdcc-4c0c-405e-9674-e303b0894ba7"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "NBCell(state['cells'][1])",
      "metadata": {
        "bridget": {
          "id": "1a044e09-0ddd-4cc9-b088-36a22d77aef0"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': '# cell 1\\nimport ipywidgets as W\\nimport matplotlib.pyplot as plt\\nfrom IPython.display import HTML, Javascript, Image, JSON\\n',\n  'metadata': {'bridget': {'id': '6fa8a390-10ad-4df6-9e2d-446c1eab7c71'}},\n  'outputs': ()\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 1\\nimport ipywidgets as W\\nimport matplotlib.pyplot as plt\\nfrom IPython.display import HTML, Javascript, Image, JSON\\n',\n 'metadata': {'bridget': {'id': '6fa8a390-10ad-4df6-9e2d-446c1eab7c71'}},\n 'outputs': ()}"
          },
          "execution_count": 18,
          "metadata": {
            "executionCount": 18
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "cell = NBCell(state['cells'][4])\ntest_is(type(cell), NBCellCode)\ncell\n",
      "metadata": {
        "bridget": {
          "id": "342734c8-29c3-4646-97e8-cbf5983a2994"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': \"# cell 4\\ndisplay(HTML('cell 4'), display_id=True, metadata={'bridget': {'cell': 4}});\\n\",\n  'metadata': {'bridget': {'id': 'fbfed6e1-60f0-442b-9237-443a6c79b6a2'}},\n  'outputs': (\n    {\n      'output_type': 'display_data',\n      'data': {'text/html': 'cell 4', 'text/plain': '<IPython.core.display.HTML object>'},\n      'metadata': {\n        'transient': {'display_id': '3a01f2cddb36c2b9379a3c46905c8252'},\n        'metadata': {'bridget': {'cell': 4}}\n      }\n    },\n  )\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 4\\ndisplay(HTML('cell 4'), display_id=True, metadata={'bridget': {'cell': 4}});\\n\",\n 'metadata': {'bridget': {'id': 'fbfed6e1-60f0-442b-9237-443a6c79b6a2'}},\n 'outputs': ({'output_type': 'display_data',\n   'data': {'text/html': 'cell 4',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': '3a01f2cddb36c2b9379a3c46905c8252'},\n    'metadata': {'bridget': {'cell': 4}}}},)}"
          },
          "execution_count": 19,
          "metadata": {
            "executionCount": 19
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "nested_idx(cell, 'outputs', 0, 'metadata', 'transient', 'display_id')",
      "metadata": {
        "bridget": {
          "id": "52b9ff8f-23e1-4992-acfc-99166203cea6"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "'3a01f2cddb36c2b9379a3c46905c8252'"
          },
          "execution_count": 20,
          "metadata": {
            "executionCount": 20
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "test_eq(nested_idx(NBCell(state['cells'][0]), 'outputs', 0, 'metadata', 'transient', 'display_id'), None)",
      "metadata": {
        "bridget": {
          "id": "aab3fbf0-75e4-41b4-8490-3d8d4ac58ef7"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "nested_idx(getattr(NBCell(state['cells'][3]), 'outputs'), 0, 'metadata', 'transient', 'display_id')",
      "metadata": {
        "bridget": {
          "id": "8e2e621d-a1b8-47d8-ba1d-ed4b225148ae"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "'44f81127a6bf5cf7a616f80d585c307d'"
          },
          "execution_count": 22,
          "metadata": {
            "executionCount": 22
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef did(o:NBOutputDisplayData) -> str|None: \n    return nested_idx(o, 'metadata', 'transient', 'display_id')  # type: ignore\n\nFC.patch(did, as_prop=True)\n",
      "metadata": {
        "bridget": {
          "id": "d78b1c03-a420-4081-b194-a745825dd643"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# type: ignore\n\ndisplay(cell.outputs[0])\n\ntest_eq(did(cell.outputs[0]), cell.outputs[0]['metadata']['transient']['display_id'])\ntest_eq(cell.outputs[0].did, cell.outputs[0]['metadata']['transient']['display_id'])\n",
      "metadata": {
        "bridget": {
          "id": "db5e1113-e417-40da-800a-2eb43d4c71bc"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "```json\n{ 'data': { 'text/html': 'cell 4',\n            'text/plain': '<IPython.core.display.HTML object>'},\n  'metadata': { 'metadata': {'bridget': {'cell': 4}},\n                'transient': { 'display_id': '3a01f2cddb36c2b9379a3c46905c8252'}},\n  'output_type': 'display_data'}\n```",
            "text/plain": "{'output_type': 'display_data',\n 'data': {'text/html': 'cell 4',\n  'text/plain': '<IPython.core.display.HTML object>'},\n 'metadata': {'transient': {'display_id': '3a01f2cddb36c2b9379a3c46905c8252'},\n  'metadata': {'bridget': {'cell': 4}}}}"
          },
          "metadata": {
            "transient": {}
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef dids(o:NBCell)->L[str|None]: return L(o.outputs).map(did)  # type: ignore\n\nFC.patch(dids, as_prop=True)\n",
      "metadata": {
        "bridget": {
          "id": "a7d1cd5b-189f-4c88-b7c9-b7557c9dcf5f"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# type: ignore\n\ncell = NBCell(state['cells'][5])\ndisplay(dids(cell))\ncell.dids",
      "metadata": {
        "bridget": {
          "id": "64c88510-ce0c-4006-b32a-7d86978891eb"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "(#1) ['548f11f4e61c14926ccf8e3dbe8684ba']"
          },
          "metadata": {
            "transient": {}
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#1) ['548f11f4e61c14926ccf8e3dbe8684ba']"
          },
          "execution_count": 26,
          "metadata": {
            "executionCount": 26
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "display(cell := NBCell(state['cells'][7]))\ncell.dids\n",
      "metadata": {
        "bridget": {
          "id": "09e4a21c-1067-47ce-b01f-2bbc7bbbf649"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': \"# cell 7\\ndisplay(HTML('cell 7.1'), display_id=True, metadata={'bridget': {'cell': 7.1}})\\ndisplay(HTML('cell 7.2'), display_id=True, metadata={'bridget': {'cell': 7.2}});\\n\",\n  'metadata': {'bridget': {'id': '9dc3d6e9-4a73-455d-a4fe-98a775fd5acb'}},\n  'outputs': (\n    {\n      'output_type': 'display_data',\n      'data': {'text/html': 'cell 7.1', 'text/plain': '<IPython.core.display.HTML object>'},\n      'metadata': {\n        'transient': {'display_id': 'd2674a71cf2eeb4f70a80f6aa5090bc7'},\n        'metadata': {'bridget': {'cell': 7.1}}\n      }\n    },\n    {\n      'output_type': 'display_data',\n      'data': {'text/html': 'cell 7.2', 'text/plain': '<IPython.core.display.HTML object>'},\n      'metadata': {\n        'transient': {'display_id': '4df836473f3cc06f9a8ec70ad068a901'},\n        'metadata': {'bridget': {'cell': 7.2}}\n      }\n    }\n  )\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 7\\ndisplay(HTML('cell 7.1'), display_id=True, metadata={'bridget': {'cell': 7.1}})\\ndisplay(HTML('cell 7.2'), display_id=True, metadata={'bridget': {'cell': 7.2}});\\n\",\n 'metadata': {'bridget': {'id': '9dc3d6e9-4a73-455d-a4fe-98a775fd5acb'}},\n 'outputs': ({'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.1',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': 'd2674a71cf2eeb4f70a80f6aa5090bc7'},\n    'metadata': {'bridget': {'cell': 7.1}}}},\n  {'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.2',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': '4df836473f3cc06f9a8ec70ad068a901'},\n    'metadata': {'bridget': {'cell': 7.2}}}})}"
          },
          "metadata": {
            "transient": {}
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#2) ['d2674a71cf2eeb4f70a80f6aa5090bc7','4df836473f3cc06f9a8ec70ad068a901']"
          },
          "execution_count": 27,
          "metadata": {
            "executionCount": 27
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "cells = L(state['cells'])",
      "metadata": {
        "bridget": {
          "id": "3a872ce3-96e8-4038-a5fd-5fe63e675e73"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "test_eq(cells[2]['outputs'][0]['name'], 'stdout')  # type: ignore\n",
      "metadata": {
        "bridget": {
          "id": "5c9f8900-b8ba-4717-baad-6703c3da8847"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "test_eq(len(codes := cells.argwhere(lambda c: c['cell_type'] == 'code')), 23)\ndisplay(codes)\ncells[codes[2]]\n",
      "metadata": {
        "bridget": {
          "id": "233c4da1-5ba5-4ed2-b05b-b74d4f975e65"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "(#23) [1,2,3,4,5,6,7,8,9,10...]"
          },
          "metadata": {
            "transient": {}
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 3\\ndisplay('cell 3', display_id=True, metadata={'bridget': {'cell': 3}});\\n\",\n 'metadata': {'bridget': {'id': '346b90ff-d25b-40c4-93c8-7016fb3d5d35'}},\n 'outputs': [{'output_type': 'display_data',\n   'data': {'text/plain': \"'cell 3'\"},\n   'metadata': {'transient': {'display_id': '44f81127a6bf5cf7a616f80d585c307d'},\n    'metadata': {'bridget': {'cell': 3}}}}]}"
          },
          "execution_count": 30,
          "metadata": {
            "executionCount": 30
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef by_type(cells: Sequence[NBCell]|L, cell_type: CellTypesT):\n    return L(cells).argwhere(lambda c: c['cell_type'] == cell_type)\n",
      "metadata": {
        "bridget": {
          "id": "49d84082-2e14-4807-8369-9d44a300ec15"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "by_type(cells, 'code')\n",
      "metadata": {
        "bridget": {
          "id": "a69689b9-1108-4646-bf7a-0a0a92138485"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#23) [1,2,3,4,5,6,7,8,9,10...]"
          },
          "execution_count": 32,
          "metadata": {
            "executionCount": 32
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef idx2cell(cells: Sequence[NBCell]|L, cell_type: CellTypesT|None=None) -> dict[int, L]:\n    cells = L(cells)\n    idxs = by_type(cells, cell_type) if cell_type else L.range(len(cells))\n    return dict(idxs.zipwith(cells[idxs]))\n",
      "metadata": {
        "bridget": {
          "id": "ebcad83f-166f-46d0-85bd-98401327a2e3"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "idx2cell(cells, 'code').keys()",
      "metadata": {
        "bridget": {
          "id": "6f14a0be-c8d4-4150-93cf-47fc74d48f5f"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "dict_keys([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])"
          },
          "execution_count": 34,
          "metadata": {
            "executionCount": 34
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "outputs_idx = cells.argwhere(lambda c: 'outputs' in c)\ndisplay(outputs_idx)\n\nprint(outputs_idx.zipwith(cells[outputs_idx])[0])\n\ndict(outputs_idx.zipwith(cells[outputs_idx]))[3]",
      "metadata": {
        "bridget": {
          "id": "ceb2ddff-87e5-4c42-9daf-0ed6878dcf3e"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "(#18) [2,3,4,5,6,7,8,9,10,11...]"
          },
          "metadata": {
            "transient": {}
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "(2, {'cell_type': 'code', 'source': '# cell 2\\nprint(1)', 'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}}, 'outputs': [{'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'}]})\n"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 3\\ndisplay('cell 3', display_id=True, metadata={'bridget': {'cell': 3}});\\n\",\n 'metadata': {'bridget': {'id': '346b90ff-d25b-40c4-93c8-7016fb3d5d35'}},\n 'outputs': [{'output_type': 'display_data',\n   'data': {'text/plain': \"'cell 3'\"},\n   'metadata': {'transient': {'display_id': '44f81127a6bf5cf7a616f80d585c307d'},\n    'metadata': {'bridget': {'cell': 3}}}}]}"
          },
          "execution_count": 35,
          "metadata": {
            "executionCount": 35
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef withOutputs(cells: Sequence[NBCell]|L):\n    return L(cells).argwhere(lambda c: 'outputs' in c)\n\ndef idx2outputs(cells: Sequence[NBCell]|L) -> dict[int, L]:\n    cells = L(cells)\n    outputs_idx = withOutputs(cells)\n    return dict(outputs_idx.zipwith(cells[outputs_idx]))\n",
      "metadata": {
        "bridget": {
          "id": "c010d28a-3603-40dc-a147-84ee60cc4a4a"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "idx2outputs(cells)[2]",
      "metadata": {
        "bridget": {
          "id": "80a43436-017d-43a6-af31-c3761a7182a3"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 2\\nprint(1)',\n 'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n 'outputs': [{'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'}]}"
          },
          "execution_count": 37,
          "metadata": {
            "executionCount": 37
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "idx2outputs(cells)[7]",
      "metadata": {
        "bridget": {
          "id": "142dbaac-2205-4751-857e-88bb0a527f0e"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 7\\ndisplay(HTML('cell 7.1'), display_id=True, metadata={'bridget': {'cell': 7.1}})\\ndisplay(HTML('cell 7.2'), display_id=True, metadata={'bridget': {'cell': 7.2}});\\n\",\n 'metadata': {'bridget': {'id': '9dc3d6e9-4a73-455d-a4fe-98a775fd5acb'}},\n 'outputs': [{'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.1',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': 'd2674a71cf2eeb4f70a80f6aa5090bc7'},\n    'metadata': {'bridget': {'cell': 7.1}}}},\n  {'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.2',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': '4df836473f3cc06f9a8ec70ad068a901'},\n    'metadata': {'bridget': {'cell': 7.2}}}}]}"
          },
          "execution_count": 38,
          "metadata": {
            "executionCount": 38
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "idx2outputs(cells)[12]",
      "metadata": {
        "bridget": {
          "id": "94ef6e58-541d-4f4f-b28e-ea3a192e14b7"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 12\\nW.IntSlider(12, description='cell')\",\n 'metadata': {'bridget': {'id': '9d500347-ed29-49d4-a862-cdf848e04b8a'}},\n 'outputs': [{'output_type': 'execute_result',\n   'data': {'application/vnd.jupyter.widget-view+json': {'version_major': 2,\n     'version_minor': 0,\n     'model_id': 'a7e50bb91a0244dd8b1b68cb663599a9'},\n    'text/plain': \"IntSlider(value=12, description='cell')\"},\n   'execution_count': 12,\n   'metadata': {'executionCount': 12}}]}"
          },
          "execution_count": 39,
          "metadata": {
            "executionCount": 39
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# BridgetNBProcessor",
      "metadata": {
        "bridget": {
          "id": "384e318d-8c0b-450d-a8cd-a578ea901855"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# import typing\n# from typing import TypeVar\n\n# if typing.TYPE_CHECKING:\n#     _T = TypeVar('_T')\n#     class LC[_T](L):\n#         def __getitem__(self, idx)->_T|LC[_T]|None:...\n",
      "metadata": {
        "bridget": {
          "id": "40181a38-69f6-406d-8cef-8d7a3a6a7b21"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\nclass BridgetNBProcessor:\n    \"Process cells from Bridget's notebook state\"\n    cells: L[NBCell]  # type: ignore\n\n    def __init__(self, state: Mapping):\n        nb = dict(state)  # state is already a (partial) notebook-ish dictionary\n        self.cells = L(nb.pop('cells')).map(NBCell)\n        self.nb = NB(cells=self.cells, **nb)  # type: ignore\n\n    def process(self, /,\n            cbs: Callback|Sequence[Callback]=(), \n            slc:slice|None=None, \n            pred:Callable[[NBCell], bool]|None=None, \n            **kwargs):\n        \"Process a subset `slc` of `self.cells` filtered by `pred` with callbacks `cbs` and `FuncCB` `kwargs`\"\n        return process_(self.cells, cbs, slc, pred, **kwargs)\n\n    def by_type(self, cell_type: CellTypesT): return by_type(self.cells, cell_type)\n    @cached_property\n    def codes(self): return by_type(self.cells, 'code')\n    @cached_property\n    def mds(self): return by_type(self.cells, 'markdown')\n\n    def idx2cell(self, cell_type: CellTypesT|None=None): return idx2cell(self.cells, cell_type)\n    @cached_property\n    def idx2code(self): return idx2cell(self.cells, 'code')\n    @cached_property\n    def idx2md(self): return idx2cell(self.cells, 'markdown')\n\n    @cached_property\n    def withOutputs(self): return withOutputs(self.cells)\n    @cached_property\n    def idx2outputs(self) -> dict[int, L]: return idx2outputs(self.cells)\n",
      "metadata": {
        "bridget": {
          "id": "4f31f2a9-9ce1-48c3-bfc9-53fcac52d079"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#|export\n\nadd_docs(BridgetNBProcessor,\n    by_type=\"Return indices of cells of type `cell_type`\",\n    codes=\"Cell indices of type `code`\",\n    mds=\"Cell indices of type `markdown`\",\n    idx2cell=\"Return dict of indices to cells of type `cell_type`\",\n    idx2code=\"Return dict of indices to cells of type `code`\",\n    idx2md=\"Return dict of indices to cells of type `markdown`\",\n    withOutputs=\"Return indices of cells with outputs\",\n    idx2outputs=\"Return dict of indices to cells with outputs\",\n)\n",
      "metadata": {
        "bridget": {
          "id": "336fb275-5d25-44eb-86ec-ec36b5c10002"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "processor = BridgetNBProcessor(state)\ncells = processor.cells\n",
      "metadata": {
        "bridget": {
          "id": "e346de60-d275-403f-82b6-de4f1b77be37"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.by_type)\n",
      "metadata": {
        "bridget": {
          "id": "21234d24-f589-497c-b392-56087d5ce6d6"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.by_type\n\n>      BridgetNBProcessor.by_type (cell_type:Literal['code','markdown'])\n\n*Return indices of cells of type `cell_type`*",
            "text/plain": "---\n\n### BridgetNBProcessor.by_type\n\n>      BridgetNBProcessor.by_type (cell_type:Literal['code','markdown'])\n\n*Return indices of cells of type `cell_type`*"
          },
          "execution_count": 44,
          "metadata": {
            "executionCount": 44
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "display(processor.cells[2])\ntest_eq(cells[2].outputs[0].name, 'stdout')  # type: ignore\n",
      "metadata": {
        "bridget": {
          "id": "685f5b5f-0b64-48ff-a7c1-82f274859696"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': '# cell 2\\nprint(1)',\n  'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n  'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 2\\nprint(1)',\n 'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n 'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)}"
          },
          "metadata": {
            "transient": {}
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "processor.by_type('code')",
      "metadata": {
        "bridget": {
          "id": "987dace0-2332-438d-ab91-efecac3214fd"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#23) [1,2,3,4,5,6,7,8,9,10...]"
          },
          "execution_count": 46,
          "metadata": {
            "executionCount": 46
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.codes)\n",
      "metadata": {
        "bridget": {
          "id": "30c8b91d-81d7-4c0a-95a8-27bc64998d96"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.codes\n\n\n\n*Cell indices of type `code`*",
            "text/plain": "---\n\n### BridgetNBProcessor.codes\n\n\n\n*Cell indices of type `code`*"
          },
          "execution_count": 47,
          "metadata": {
            "executionCount": 47
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.mds)\n",
      "metadata": {
        "bridget": {
          "id": "371913ec-e415-49e3-abbe-035af0ee92a5"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.mds\n\n\n\n*Cell indices of type `markdown`*",
            "text/plain": "---\n\n### BridgetNBProcessor.mds\n\n\n\n*Cell indices of type `markdown`*"
          },
          "execution_count": 48,
          "metadata": {
            "executionCount": 48
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "processor.mds",
      "metadata": {
        "bridget": {
          "id": "d610c5bb-5611-4ca4-8a2f-6e5069a7d64a"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#1) [0]"
          },
          "execution_count": 49,
          "metadata": {
            "executionCount": 49
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.idx2cell)\n",
      "metadata": {
        "bridget": {
          "id": "c98ce9c1-e858-47b5-b4f8-194983cedb87"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.idx2cell\n\n>      BridgetNBProcessor.idx2cell\n>                                   (cell_type:Optional[Literal['code','markdown\n>                                   ']]=None)\n\n*Return dict of indices to cells of type `cell_type`*",
            "text/plain": "---\n\n### BridgetNBProcessor.idx2cell\n\n>      BridgetNBProcessor.idx2cell\n>                                   (cell_type:Optional[Literal['code','markdown\n>                                   ']]=None)\n\n*Return dict of indices to cells of type `cell_type`*"
          },
          "execution_count": 50,
          "metadata": {
            "executionCount": 50
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "processor.idx2cell('code')[2]",
      "metadata": {
        "bridget": {
          "id": "6aaea80d-15a5-474f-a233-8855018182c8"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': '# cell 2\\nprint(1)',\n  'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n  'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 2\\nprint(1)',\n 'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n 'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)}"
          },
          "execution_count": 51,
          "metadata": {
            "executionCount": 51
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.idx2code)\n",
      "metadata": {
        "bridget": {
          "id": "d22db0db-d841-471c-bf7b-3f271fffd244"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.idx2code\n\n\n\n*Return dict of indices to cells of type `code`*",
            "text/plain": "---\n\n### BridgetNBProcessor.idx2code\n\n\n\n*Return dict of indices to cells of type `code`*"
          },
          "execution_count": 52,
          "metadata": {
            "executionCount": 52
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.idx2md)\n",
      "metadata": {
        "bridget": {
          "id": "2ae6b5b9-e129-4c3e-9d84-58de34bd449f"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.idx2md\n\n\n\n*Return dict of indices to cells of type `markdown`*",
            "text/plain": "---\n\n### BridgetNBProcessor.idx2md\n\n\n\n*Return dict of indices to cells of type `markdown`*"
          },
          "execution_count": 53,
          "metadata": {
            "executionCount": 53
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "processor.idx2md[0]",
      "metadata": {
        "bridget": {
          "id": "72e0cdd4-e5b3-4c3b-8ee6-1daec5363b37"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> markdown\n```json\n{'cell_type': 'markdown', 'source': '# cell 0', 'metadata': {'bridget': {'id': '69041da8-3d1f-49b8-902c-4ec17002b915'}}}\n```",
            "text/plain": "{'cell_type': 'markdown',\n 'source': '# cell 0',\n 'metadata': {'bridget': {'id': '69041da8-3d1f-49b8-902c-4ec17002b915'}}}"
          },
          "execution_count": 54,
          "metadata": {
            "executionCount": 54
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.withOutputs)",
      "metadata": {
        "bridget": {
          "id": "216ea78f-578f-48eb-ba0a-09fd168412e6"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.withOutputs\n\n\n\n*Return indices of cells with outputs*",
            "text/plain": "---\n\n### BridgetNBProcessor.withOutputs\n\n\n\n*Return indices of cells with outputs*"
          },
          "execution_count": 55,
          "metadata": {
            "executionCount": 55
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.idx2outputs)",
      "metadata": {
        "bridget": {
          "id": "3040d0f7-55d2-47a7-b8ff-d9882163cf0a"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.idx2outputs\n\n\n\n*Return dict of indices to cells with outputs*",
            "text/plain": "---\n\n### BridgetNBProcessor.idx2outputs\n\n\n\n*Return dict of indices to cells with outputs*"
          },
          "execution_count": 56,
          "metadata": {
            "executionCount": 56
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# type: ignore\n\ndisplay(cells[codes[2]].outputs[0])\n\ntest_eq(did(cells[codes[2]].outputs[0]), cells[codes[2]].outputs[0].metadata['transient']['display_id'])\ntest_eq(cells[codes[2]].outputs[0].did, cells[codes[2]].outputs[0].metadata['transient']['display_id'])\n",
      "metadata": {
        "bridget": {
          "id": "afcf7c26-07e0-4c5c-b3d4-4dea43056f46"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "```json\n{ 'data': {'text/plain': \"'cell 3'\"},\n  'metadata': { 'metadata': {'bridget': {'cell': 3}},\n                'transient': { 'display_id': '44f81127a6bf5cf7a616f80d585c307d'}},\n  'output_type': 'display_data'}\n```",
            "text/plain": "{'output_type': 'display_data',\n 'data': {'text/plain': \"'cell 3'\"},\n 'metadata': {'transient': {'display_id': '44f81127a6bf5cf7a616f80d585c307d'},\n  'metadata': {'bridget': {'cell': 3}}}}"
          },
          "metadata": {
            "transient": {}
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "print(processor.idx2outputs.keys())\ndisplay(processor.idx2outputs[1])\nprocessor.idx2outputs[2]",
      "metadata": {
        "bridget": {
          "id": "efbf8239-9c18-4482-a318-3e8567750468"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "dict_keys([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': '# cell 1\\nimport ipywidgets as W\\nimport matplotlib.pyplot as plt\\nfrom IPython.display import HTML, Javascript, Image, JSON\\n',\n  'metadata': {'bridget': {'id': '6fa8a390-10ad-4df6-9e2d-446c1eab7c71'}},\n  'outputs': ()\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 1\\nimport ipywidgets as W\\nimport matplotlib.pyplot as plt\\nfrom IPython.display import HTML, Javascript, Image, JSON\\n',\n 'metadata': {'bridget': {'id': '6fa8a390-10ad-4df6-9e2d-446c1eab7c71'}},\n 'outputs': ()}"
          },
          "metadata": {
            "transient": {}
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': '# cell 2\\nprint(1)',\n  'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n  'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': '# cell 2\\nprint(1)',\n 'metadata': {'bridget': {'id': '4732a01d-86bf-4e46-9f65-bbd7378c7be1'}},\n 'outputs': ({'output_type': 'stream', 'name': 'stdout', 'text': '1\\n'},)}"
          },
          "execution_count": 58,
          "metadata": {
            "executionCount": 58
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "(cell := processor.idx2outputs[7])",
      "metadata": {
        "bridget": {
          "id": "77f98816-bdf0-457e-96b5-834f7d5445bf"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "> code\n```json\n{\n  'cell_type': 'code',\n  'source': \"# cell 7\\ndisplay(HTML('cell 7.1'), display_id=True, metadata={'bridget': {'cell': 7.1}})\\ndisplay(HTML('cell 7.2'), display_id=True, metadata={'bridget': {'cell': 7.2}});\\n\",\n  'metadata': {'bridget': {'id': '9dc3d6e9-4a73-455d-a4fe-98a775fd5acb'}},\n  'outputs': (\n    {\n      'output_type': 'display_data',\n      'data': {'text/html': 'cell 7.1', 'text/plain': '<IPython.core.display.HTML object>'},\n      'metadata': {\n        'transient': {'display_id': 'd2674a71cf2eeb4f70a80f6aa5090bc7'},\n        'metadata': {'bridget': {'cell': 7.1}}\n      }\n    },\n    {\n      'output_type': 'display_data',\n      'data': {'text/html': 'cell 7.2', 'text/plain': '<IPython.core.display.HTML object>'},\n      'metadata': {\n        'transient': {'display_id': '4df836473f3cc06f9a8ec70ad068a901'},\n        'metadata': {'bridget': {'cell': 7.2}}\n      }\n    }\n  )\n}\n```",
            "text/plain": "{'cell_type': 'code',\n 'source': \"# cell 7\\ndisplay(HTML('cell 7.1'), display_id=True, metadata={'bridget': {'cell': 7.1}})\\ndisplay(HTML('cell 7.2'), display_id=True, metadata={'bridget': {'cell': 7.2}});\\n\",\n 'metadata': {'bridget': {'id': '9dc3d6e9-4a73-455d-a4fe-98a775fd5acb'}},\n 'outputs': ({'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.1',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': 'd2674a71cf2eeb4f70a80f6aa5090bc7'},\n    'metadata': {'bridget': {'cell': 7.1}}}},\n  {'output_type': 'display_data',\n   'data': {'text/html': 'cell 7.2',\n    'text/plain': '<IPython.core.display.HTML object>'},\n   'metadata': {'transient': {'display_id': '4df836473f3cc06f9a8ec70ad068a901'},\n    'metadata': {'bridget': {'cell': 7.2}}}})}"
          },
          "execution_count": 59,
          "metadata": {
            "executionCount": 59
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def get_data(cell: NBCell, mime:str|None=None): \n    return d.get(mime, None) if (d := nested_idx(cell, 'outputs', 0, 'data')) and mime else d\nget_html = partial(get_data, mime='text/html')\nget_plain = partial(get_data, mime='text/plain')\n\nprint(f\"{get_data(cell)=}\\n{get_html(cell)=}\\n{get_plain(cell)=}\")\n",
      "metadata": {
        "bridget": {
          "id": "c1508300-9499-406c-83db-2e96a8dc0fcb"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "get_data(cell)={'text/html': 'cell 7.1', 'text/plain': '<IPython.core.display.HTML object>'}\nget_html(cell)='cell 7.1'\nget_plain(cell)='<IPython.core.display.HTML object>'\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "show_doc(BridgetNBProcessor.process)",
      "metadata": {
        "bridget": {
          "id": "08919f31-8340-4c7f-931f-4fa56a5416eb"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/markdown": "---\n\n### BridgetNBProcessor.process\n\n>      BridgetNBProcessor.process\n>                                  (cbs:Union[olio.callback.Callback,Sequence[ol\n>                                  io.callback.Callback]]=(),\n>                                  slc:slice|None=None, pred:Optional[Callable[[\n>                                  __main__.NBCell],bool]]=None, **kwargs)\n\n*Process a subset `slc` of `self.cells` filtered by `pred` with callbacks `cbs` and `FuncCB` `kwargs`*",
            "text/plain": "---\n\n### BridgetNBProcessor.process\n\n>      BridgetNBProcessor.process\n>                                  (cbs:Union[olio.callback.Callback,Sequence[ol\n>                                  io.callback.Callback]]=(),\n>                                  slc:slice|None=None, pred:Optional[Callable[[\n>                                  __main__.NBCell],bool]]=None, **kwargs)\n\n*Process a subset `slc` of `self.cells` filtered by `pred` with callbacks `cbs` and `FuncCB` `kwargs`*"
          },
          "execution_count": 61,
          "metadata": {
            "executionCount": 61
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "processor.process(on_iter=lambda _,item: print(item.cell_type, end=', '));\n",
      "metadata": {
        "bridget": {
          "id": "6ec27e70-80f2-49ec-a4d0-4701335dd95d"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "markdown, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, "
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "ctyps = []\ncb = FuncCB(on_iter=lambda _,item: ctyps.append(item.cell_type))\nprocess_(processor.cells, cb)\ntest_eq(ctyps, [c.cell_type for c in processor.cells])\n\nctyps = []\nprocessor.process(cb, slice(0,2))\ntest_eq(ctyps, ('markdown', 'code'))\n",
      "metadata": {
        "bridget": {
          "id": "a2048242-e820-4b87-a521-45f575fc7b3b"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# IpynbConvertCB\n> Notebook state to IPython notebook format (ipynb)",
      "metadata": {
        "bridget": {
          "id": "c9241b0a-5896-4557-92d0-3dccc33c9aac"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\nclass IpynbOutput(AD): ...\nclass IpynbCell(AD): outputs: tuple[IpynbOutput, ...]\n\nclass St2Ipynb(FC.Transform): \n    def encodes(self, x: NBOutput) -> IpynbOutput:  # type: ignore\n        fmt = IpynbOutput(x)\n        if fmt['output_type'] in ('display_data', 'execute_result'): fmt.metadata=x.get('metadata', {})\n        fmt.get('metadata', emptyd).pop('transient', None)\n        return fmt\n    def decodes(self, x: IpynbOutput) -> NBOutput:  # type: ignore\n        return NBOutput(x)\n\n    def encodes(self, x: NBCell) -> IpynbCell:\n        fmt = update_(IpynbCell(x), metadata=x.get('metadata', {}))\n        if 'outputs' in x: fmt['outputs'] = self(x.outputs)\n        if x['cell_type'] == 'code': \n            fmt['execution_count'] = fmt.get('execution_count', None)\n        return fmt\n    def decodes(self, x: IpynbCell) -> NBCell:\n        return NBCell(x)\n",
      "metadata": {
        "bridget": {
          "id": "c45f3823-ee5a-42a3-a035-e391a306db5a"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "cell = NBCell({\n    'cell_type': 'code', 'source': '',\n    'outputs': ({\n        'output_type': 'display_data',\n        'data': {'text/plain': ''},\n        'metadata': {'transient': {'display_id': 'abc'}}\n    },)\n})\ntest_eq(type(c := cast(IpynbCell, St2Ipynb()(cell))), IpynbCell)\ntest_eq(c.outputs[0].metadata, {})\n",
      "metadata": {
        "bridget": {
          "id": "245417e8-99a7-4f30-8535-feffcbcde30d"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "icells = St2Ipynb()(processor.cells)\nRenderJSON(icells, init_level=1, max_height=400).display()\n",
      "metadata": {
        "bridget": {
          "id": "db93de80-f9ec-4916-aff0-1a382e3f0ace"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\nclass IpynbConvertCB(Callback):\n    def before_iter(self, nb:NB): \n        # cells = St2Ipynb()(nb.cells[:1])\n        self.notebook = {'nbformat': 4, 'nbformat_minor': 4, 'metadata': {}, 'cells': []}\n        self.cell_counter = 0\n    \n    def on_iter(self, ctx, cell):\n        # fmt = update_(St2Ipynb()(cell), id=self.cell_counter)\n        self.notebook['cells'].append(St2Ipynb()(cell))\n        self.cell_counter += 1\n",
      "metadata": {
        "bridget": {
          "id": "1c1125da-b3cd-4920-8cb5-7ee8d7b87b1a"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "processor = BridgetNBProcessor(state)\ncb, *_ = processor.process(IpynbConvertCB())\nipynb_json = cast(IpynbConvertCB, cb).notebook\n\nnb = nbformat.reads(json.dumps(ipynb_json), as_version=4, capture_validation_error=(derr := {}))\ntest_eq(derr, {})\n\nRenderJSON(ipynb_json, init_level=1, max_height=400).display()\n",
      "metadata": {
        "bridget": {
          "id": "0c36626e-4374-4b9e-ab6c-8fbad0554799"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# MDConvertCB\n",
      "metadata": {
        "bridget": {
          "id": "271f9147-b0a9-4a37-876a-8f2a6605e9e6"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# StateConversionCB",
      "metadata": {
        "bridget": {
          "id": "faf4c29a-6c81-45f3-9bb8-9cacded4c9cb"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# class StateConversionCB(Callback):\n#     @cached_property\n#     def state(self) -> AD: return AD(type='state',cells=[])\n    \n#     def _convert_output(self, output):\n#         converted = dict(output)\n#         if 'output_type' in converted:\n#             converted['metadata']['outputType'] = converted.pop('output_type')\n#         return converted\n    \n#     def on_iter(self, ctx, cell):\n#         # Convert each cell back to the original state format\n#         st_cell = NBCell({\n#             'cell_type': cell.cell_type,\n#             'source': ''.join(cell.source) if isinstance(cell.source, list) else cell.source,\n#         })\n#         if cell.metadata: st_cell.metadata = cell.metadata\n#         if cell.cell_type == 'code':\n#             st_cell['outputs'] = [self._convert_output(o) for o in cell.outputs]\n#         self.state.cells.append(st_cell)\n\n# tracker = CollBack(nb.cells, cbs=[cb := StateConversionCB()])\n# tracker.update(item=nb.cells[0])\n# test_eq(cell, nb.cells[0])\n\n# # with tracker.this_cbs([cb := StateConversionCB()]):\n# #     # for cell in tracker: pass\n# #     cell = next(iter(tracker))\n# # converted_state = cb.state\n\n# # # Compare with original state\n# # for i, c1,c2 in zip(range(len(converted_state.cells)), converted_state.cells, AD(state).cells):\n# #     cprint(c1, c2)\n# #     test_eq(c1, c2)\n# # # assert converted_state['cells'] == state['cells'], \"Round-trip conversion failed\"",
      "metadata": {
        "bridget": {
          "id": "36323e57-883e-4567-82f9-40168bfe3ace"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# show_notebook_state",
      "metadata": {
        "bridget": {
          "id": "6883c938-c24b-4a72-9ef1-cfbb0e389460"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\ndef show_notebook_state(state):\n    \"Display notebook state with our custom mime type\"\n    dh = display({'application/x-notebook-state': state}, raw=True, display_id=True)\n    return dh",
      "metadata": {
        "bridget": {
          "id": "fe6fb0cb-a195-463e-8fd5-8a990c72db78"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "dh = show_notebook_state({\"test\": \"Hello from notebook state!\"})",
      "metadata": {
        "bridget": {
          "id": "da0c461c-50a0-47e5-b95c-4f811c208938"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/x-notebook-state": "{\"test\":\"Hello from notebook state!\"}"
          },
          "metadata": {
            "transient": {
              "display_id": "e0217b0949c77ce27c9f9c5cf840b88a"
            }
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Simple visual feedback of notebook state. The front-end manages just one notebook state, though you can display multiple vies of it with `show_notebook_state`.\n\nNote that the state **is** still in the **front-end** (JS-land). This function is just a visual feedback of state changes, but we haven't transferred yet the state to the **kernel** (python-land). For that, see next section.\n",
      "metadata": {
        "bridget": {
          "id": "3770e86d-be0a-4019-9521-05a59852656a"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# NBStateFetcher",
      "metadata": {
        "bridget": {
          "id": "8acdfb2b-029b-4fb3-b41d-7f8e385f9319"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "#| export\n\nclass NBStateFetcher(anywidget.AnyWidget):\n    _esm = anytext('debugger;', _BUNDLER_PATH / 'observerManager.js', _BUNDLER_PATH / 'nbstate.js', '''\nexport default { \n    initialize({ model }) { return initializeNBState(model) }\n};\n''')\n    feedback = T.Bool(True).tag(sync=True)\n    state = T.Dict(default_value=empty_state())\n    def __init__(self, *args, **kwargs):\n        # self._state = {}\n        self._pending_requests = {}\n        super().__init__(*args, **kwargs)\n        self.on_msg(self._handle_message)\n        self.dh = display(self, display_id=True, metadata=skip())\n        self.show('NBState loaded')\n        \n    def show(self, msg:str):\n        if self.dh: self.dh.update(HTML(f\"<div>{msg}</div>\"), metadata=skip())\n\n    def close(self):\n        if self.dh: self.dh.update(HTML('NBState unloaded'))\n        if self.feedback_dh: self.feedback_dh.update('')\n        super().close()\n    \n    # async def _update_state(self) -> dict:\n    #     future = asyncio.Future()\n    #     self._pending_requests['state'] = future\n    #     self.send({'cmd': 'get_state'})\n    #     return await future\n    \n    # async def update_state():\n    #     html = await nbstate.get_output_html('45579d07-5c5c-4159-abec-b8ec41fd91fe')  # Use any output ID from your state\n    #     print(f\"Got HTML: {html[:100]}...\")  # Show first 100 chars\n\n    def _handle_message(self, _, content, buffers):\n        \"Handle messages from JavaScript front-end\"\n        if content.get('cmd') == 'notebook_state_not_found':\n            self.feedback_dh = show_notebook_state({\"test\": \"Hello from notebook state!\"})\n        if content.get('cmd') == 'state_update':\n            # self._state = json.loads(content['state']) if content['state'] else {}\n            state = (json.loads(content['state']) \n                    if content['state'] else \n                    empty_state())\n            self.state = state\n            # this shouldn't trigger update\n            self.show(  f\"State updated type: {state['type']} \" \n                        f\"cells #{len(state['cells'])} @{state['timestamp']}\")\n            # if hasattr(self, '_output_index'): \n            #     del self._output_index\n        if content.get('cmd') == 'output_html':\n            output_id = content['output_id']\n            if output_id in self._pending_requests:\n                future = self._pending_requests.pop(output_id)\n                future.set_result(content['html'])\n",
      "metadata": {
        "bridget": {
          "id": "0fc46a28-591e-498e-920f-7c857fc088f8"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "cleanupwidgets('fetcher')\n\nfetcher = NBStateFetcher()\n",
      "metadata": {
        "bridget": {
          "id": "f7cf12e1-6f4d-4fae-9646-239ad4560ba5"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "print('test2')",
      "metadata": {
        "bridget": {
          "id": "f78866f6-411c-47b8-befb-47dd60d39ce2"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "test2\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "display(HTML('<div>test7</div>'), metadata={'bridget': {'cell':'test7'}}, display_id=True);",
      "metadata": {
        "bridget": {
          "id": "f8d05a83-ca2f-4a94-8f7d-daa7b1be7c16"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>test7</div>",
            "text/plain": "<IPython.core.display.HTML object>"
          },
          "metadata": {
            "transient": {
              "display_id": "d1ff6d07e62ce798cad0d07cba0932f7"
            },
            "metadata": {
              "bridget": {
                "cell": "test7"
              }
            }
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "cleanupwidgets('fetcher2')\n\nfetcher2 = NBStateFetcher()\n",
      "metadata": {
        "bridget": {
          "id": "9d5c0c99-e637-43b3-b904-1e484cd4dc87"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "cleanupwidgets('fetcher')\n",
      "metadata": {
        "bridget": {
          "id": "eda58c6a-fe10-4a53-a77e-c672ab6660f9"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# fetcher.show('test')\nwith open('_tirar.json', 'w') as f:\n    json.dump(fetcher.state, f, indent=2)\n",
      "metadata": {
        "bridget": {
          "id": "dc937993-2818-4c4a-b25d-32d1cb5d7703"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# NBState",
      "metadata": {
        "bridget": {
          "id": "907b1742-83c2-4d99-a037-7dc25bb5b943"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "class NBState(T.HasTraits):\n    state = T.Dict(default_value={})\n    def __init__(self, source: NBStateFetcher|Mapping|None=None):\n        if source is None: source = NBStateFetcher()\n        self.source = source\n\n    @property\n    def source(self): return self._source\n    @source.setter\n    def source(self, source: NBStateFetcher|Mapping|None=None):\n        if hasattr(self, '_link'): self._link.unlink()\n        if isinstance(source, NBStateFetcher): \n            self._link = T.dlink((source, 'state'), (self, 'state'))\n        elif isinstance(source, Mapping): self.state = source\n        else: self.state = empty_state()\n        try: del self.processor\n        except: pass\n        self._source = source\n\n    @cached_property\n    def processor(self): return BridgetNBProcessor(self.state)\n    @property\n    def cells(self): return self.processor.cells\n\n    # async def get_output_html(self, output_id: str) -> str | None:\n    #     future = asyncio.Future()\n    #     self._pending_requests[output_id] = future\n    #     self.send({'cmd': 'get_output_html', 'output_id': output_id})\n    #     return await future\n\n    def __del__(self):\n        if hasattr(self, '_link'): self._link.unlink()\n",
      "metadata": {
        "bridget": {
          "id": "68dc48dd-9609-418a-81a0-8e595f57f48b"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# state = json.loads(Path('../nbinspect/outputs.json').read_text('utf-8'))\n\nnb = NBState()#state)\n",
      "metadata": {
        "bridget": {
          "id": "bd9d7f3e-34fd-4a85-ae9f-cc55edeb5b9b"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "display(nb.processor.mds)\nnb.processor.codes",
      "metadata": {
        "bridget": {
          "id": "817a5f30-bf4c-4da8-9f3b-c94f9a1d4426"
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "(#17) [2,3,9,14,15,16,19,44,69,75...]"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "(#86) [0,1,4,5,6,7,8,10,11,12...]"
          },
          "execution_count": 121,
          "metadata": {
            "executionCount": 121
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "cleanupwidgets(nb.source)",
      "metadata": {
        "bridget": {
          "id": "eb191a2f-d23d-4ba9-9287-8eafcf7b652d"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Auto display_id",
      "metadata": {
        "bridget": {
          "id": "11f92bca-4880-46de-a25c-2f710a1a3e79"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "from IPython.core.interactiveshell import InteractiveShell\nfrom IPython.core.displaypub import DisplayPublisher\nfrom ipykernel.zmqshell import ZMQDisplayPublisher\n\ndisplay_pub: ZMQDisplayPublisher = InteractiveShell.instance().display_pub  # type: ignore\nassert isinstance(display_pub, ZMQDisplayPublisher)\n\ndef _add_did(msg): \n    msg['content']['metadata']['brdgt_did'] = msg['content']['transient']['display_id']\n    return msg\n",
      "metadata": {
        "bridget": {
          "id": "786b4659-eb61-4f65-a572-381f9581bc78"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "dh = display(HTML('<div>test5</div>'))",
      "metadata": {
        "bridget": {
          "id": "30a4239e-d7c7-4f28-953b-e556d4371a39"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# # display_pub.register_hook(FC.noop)\n# # display_pub.unregister_hook(FC.noop)\n# display_pub.register_hook(_add_did)",
      "metadata": {
        "bridget": {
          "id": "a2c4a756-5986-4679-a0be-787ce31fa862"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "dh.update(HTML('<div>test8</div>'))",
      "metadata": {
        "bridget": {
          "id": "93025a6f-de65-4ef6-afc1-f6cdb8a1adac"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# def outputs_from_source(nbstate:NBState, source:str):\n#     \"Get the output ids from cell source, total or partial\"\n#     for cell in nbstate.state['data']:\n#         if source in cell.get('text', ''):\n#             return cell['outputs']  \n#     return None\n\n# out = outputs_from_source(nbstate, \"dh = display(HTML('<div>test4</div>'), display_id=True)\")\n# out",
      "metadata": {
        "bridget": {
          "id": "b8943216-0194-4be3-a1f9-8b0001b1189d"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# # Test async get_output_html\n# import asyncio\n\n# async def test_output():\n#     html = await nbstate.get_output_html('93310b63-49df-487b-8291-058a7f5cc8e5')  # Use any output ID from your state\n#     print(f\"Got HTML: {html[:100]}...\")  # Show first 100 chars\n\n# # Run the async function\n# await test_output()",
      "metadata": {
        "bridget": {
          "id": "74abe9b5-9c4b-4b99-88f7-c082dc0509c7"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "# async def test_multiple_outputs():\n#     output_ids = list(nbstate.state['data'][0]['outputs'])[:2]  # Get first two outputs\n#     results = await asyncio.gather(*[\n#         nbstate.get_output_html(out['id']) \n#         for out in output_ids\n#     ])\n#     for id, html in zip(output_ids, results):\n#         print(f\"Output {id}: {html[:50]}...\")\n\n# await test_multiple_outputs()",
      "metadata": {
        "bridget": {
          "id": "485ca6ab-a4de-4041-a10e-6737f74c1698"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Colophon\n----\n",
      "metadata": {
        "bridget": {
          "id": "dfcd7af6-64e1-42e2-84fc-d44cb5db1dab"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "import fastcore.all as FC\nimport nbdev\nfrom nbdev.clean import nbdev_clean\n",
      "metadata": {
        "bridget": {
          "id": "ba7ded98-aeab-402f-a7dd-ba6f3e9b5c47"
        }
      }
    },
    {
      "cell_type": "code",
      "source": "if FC.IN_NOTEBOOK:\n    nb_path = '18_nb_state.ipynb'\n    nbdev_clean(nb_path)\n    nbdev.nbdev_export(nb_path)\n",
      "metadata": {
        "bridget": {
          "id": "851d3bbc-1072-4692-a1ba-3332fd65a29a"
        }
      }
    }
  ],
  "changeType": "notebookUpdate",
  "timestamp": "10:01:35 PM"
}